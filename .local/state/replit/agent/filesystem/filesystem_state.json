{"file_contents":{"README.md":{"content":"# QuMail---Quantum-Secure-Email-Client-Application\nQuantum Implementation Project\n","size_bytes":82},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Quantum security level colors\n        quantum: {\n          \"level1\": \"hsl(159.7826, 100%, 36.0784%)\", // Green for OTP\n          \"level2\": \"hsl(221.2, 83.2%, 53.3%)\", // Blue for AES\n          \"level3\": \"hsl(271.5, 81.0%, 55.9%)\", // Purple for PQC\n          \"level4\": \"hsl(210, 10%, 50%)\", // Gray for plain\n        }\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"quantum-pulse\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n        \"quantum-shimmer\": {\n          \"0%\": {\n            backgroundPosition: \"200% 0\",\n          },\n          \"100%\": {\n            backgroundPosition: \"-200% 0\",\n          },\n        },\n        \"security-glow\": {\n          \"0%, 100%\": {\n            boxShadow: \"0 0 5px hsl(var(--accent))\",\n          },\n          \"50%\": {\n            boxShadow: \"0 0 20px hsl(var(--accent)), 0 0 30px hsl(var(--accent))\",\n          },\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"quantum-pulse\": \"quantum-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"quantum-shimmer\": \"quantum-shimmer 2s infinite\",\n        \"security-glow\": \"security-glow 2s ease-in-out infinite\",\n      },\n      backgroundImage: {\n        \"gradient-quantum\": \"linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--accent)) 100%)\",\n        \"gradient-security\": \"linear-gradient(90deg, hsl(var(--quantum-level1)) 0%, hsl(var(--quantum-level2)) 50%, hsl(var(--quantum-level3)) 100%)\",\n      },\n      spacing: {\n        '18': '4.5rem',\n        '88': '22rem',\n      },\n      minHeight: {\n        '0': '0',\n        '1/4': '25%',\n        '1/2': '50%',\n        '3/4': '75%',\n        'full': '100%',\n      },\n      maxWidth: {\n        '8xl': '88rem',\n        '9xl': '96rem',\n      }\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    // Custom plugin for quantum security utilities\n    function({ addUtilities }: { addUtilities: any }) {\n      const newUtilities = {\n        '.quantum-security-indicator': {\n          position: 'relative',\n          '&::before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            background: 'linear-gradient(90deg, transparent 0%, hsl(var(--accent)) 50%, transparent 100%)',\n            animation: 'quantum-shimmer 2s infinite',\n            zIndex: '-1',\n          }\n        },\n        '.security-level-glow': {\n          boxShadow: '0 0 10px hsl(var(--accent)), 0 0 20px hsl(var(--accent))',\n        },\n        '.quantum-card': {\n          background: 'linear-gradient(135deg, hsl(var(--card)) 0%, hsl(var(--muted)) 100%)',\n          border: '1px solid hsl(var(--border))',\n          borderRadius: 'var(--radius)',\n        }\n      }\n      addUtilities(newUtilities)\n    }\n  ],\n} satisfies Config;\n","size_bytes":5477},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { pool } from \"./db\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId: string;\n  }\n}\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Configure PostgreSQL session store\nconst PgSession = connectPgSimple(session);\n\n// Configure session middleware with PostgreSQL store\napp.use(session({\n  store: new PgSession({\n    pool: pool,\n    tableName: 'sessions',\n    createTableIfMissing: true\n  }),\n  secret: process.env.SESSION_SECRET || \"quantum-mail-secret-key-super-secure-2024\", \n  resave: false,\n  saveUninitialized: false,\n  name: \"qumail.sid\", // Custom session name\n  cookie: {\n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days instead of 1 day\n    sameSite: 'lax' // Better security\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2911},"server/outlookClient.ts":{"content":"import { Client } from '@microsoft/microsoft-graph-client';\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=outlook',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('Outlook not connected');\n  }\n  return accessToken;\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableOutlookClient() {\n  const accessToken = await getAccessToken();\n\n  return Client.initWithMiddleware({\n    authProvider: {\n      getAccessToken: async () => accessToken\n    }\n  });\n}\n","size_bytes":1604},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { kmeSimulator } from \"./services/kmeSimulator\";\nimport { emailService } from \"./services/emailService\";\nimport { SecurityLevel, insertUserSchema, insertAuditLogSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session?.userId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  // User authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, email, password } = req.body;\n      \n      // Validate required fields\n      if (!username || !email || !password) {\n        return res.status(400).json({ message: \"Username, email, and password are required\" });\n      }\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      const user = await storage.createUser({\n        username,\n        email,\n        password,\n        emailProvider: \"qumail\", // Internal platform only\n        defaultSecurityLevel: \"level1\"\n      });\n      \n      // Log registration\n      await storage.createAuditLog({\n        userId: user.id,\n        action: \"user_registered\",\n        details: { email: user.email, provider: \"qumail\" },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      });\n\n      req.session.userId = user.id;\n      res.json({ user: { id: user.id, email: user.email, username: user.username } });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || user.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      await storage.createAuditLog({\n        userId: user.id,\n        action: \"user_login\",\n        details: { email: user.email },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      });\n\n      req.session.userId = user.id;\n      res.json({ user: { id: user.id, email: user.email, username: user.username } });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", requireAuth, async (req, res) => {\n    const userId = req.session.userId;\n    \n    await storage.createAuditLog({\n      userId,\n      action: \"user_logout\",\n      details: {},\n      ipAddress: req.ip,\n      userAgent: req.get('User-Agent')\n    });\n\n    req.session.destroy(() => {\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          username: user.username,\n          emailProvider: user.emailProvider,\n          defaultSecurityLevel: user.defaultSecurityLevel\n        } \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user info\" });\n    }\n  });\n\n  // KME Simulator routes (ETSI GS QKD-014 style)\n  app.post(\"/kme/requestKey\", async (req, res) => {\n    try {\n      const keyRequestSchema = z.object({\n        request_id: z.string(),\n        key_length_bits: z.number().positive(),\n        recipient: z.string().optional()\n      });\n\n      const keyRequest = keyRequestSchema.parse(req.body);\n      const response = await kmeSimulator.requestKey(keyRequest);\n      \n      res.json(response);\n    } catch (error) {\n      console.error(\"KME request key error:\", error);\n      res.status(400).json({ message: \"Invalid key request\" });\n    }\n  });\n\n  app.get(\"/kme/keys/:keyId\", async (req, res) => {\n    try {\n      const { keyId } = req.params;\n      const keyMaterial = await kmeSimulator.getKey(keyId);\n      \n      if (!keyMaterial) {\n        return res.status(404).json({ message: \"Key not found or expired\" });\n      }\n\n      res.json(keyMaterial);\n    } catch (error) {\n      console.error(\"KME get key error:\", error);\n      res.status(500).json({ message: \"Failed to retrieve key\" });\n    }\n  });\n\n  app.post(\"/kme/keys/:keyId/ack\", async (req, res) => {\n    try {\n      const { keyId } = req.params;\n      const ackSchema = z.object({\n        consumed_bytes: z.number().positive(),\n        message_id: z.string().optional()\n      });\n\n      const ack = ackSchema.parse(req.body);\n      const success = await kmeSimulator.acknowledgeKeyUsage(keyId, ack);\n      \n      if (!success) {\n        return res.status(400).json({ message: \"Failed to acknowledge key usage\" });\n      }\n\n      res.json({ status: \"acknowledged\" });\n    } catch (error) {\n      console.error(\"KME ack error:\", error);\n      res.status(400).json({ message: \"Invalid acknowledgment\" });\n    }\n  });\n\n  // Key management routes\n  app.get(\"/api/keys/pool\", requireAuth, async (req, res) => {\n    try {\n      const stats = await kmeSimulator.getKeyPoolStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Get key pool error:\", error);\n      res.status(500).json({ message: \"Failed to get key pool stats\" });\n    }\n  });\n\n  app.get(\"/api/keys\", requireAuth, async (req, res) => {\n    try {\n      const keys = await storage.getActiveKeys();\n      const safeKeys = keys.map(key => ({\n        id: key.id,\n        keyId: key.keyId,\n        keyLength: key.keyLength,\n        consumedBytes: key.consumedBytes,\n        maxConsumptionBytes: key.maxConsumptionBytes,\n        utilizationPercent: Math.round((key.consumedBytes || 0) / key.maxConsumptionBytes * 100),\n        expiryTime: key.expiryTime,\n        isActive: key.isActive,\n        createdAt: key.createdAt\n      }));\n      \n      res.json(safeKeys);\n    } catch (error) {\n      console.error(\"Get keys error:\", error);\n      res.status(500).json({ message: \"Failed to get keys\" });\n    }\n  });\n\n  app.post(\"/api/keys/request\", requireAuth, async (req, res) => {\n    try {\n      const requestSchema = z.object({\n        keyLength: z.number().positive().default(8192),\n        recipient: z.string().optional()\n      });\n\n      const { keyLength, recipient } = requestSchema.parse(req.body);\n      \n      const keyRequest = {\n        request_id: `req-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        key_length_bits: keyLength * 8,\n        recipient\n      };\n\n      const response = await kmeSimulator.requestKey(keyRequest);\n      \n      await storage.createAuditLog({\n        userId: req.session.userId,\n        action: \"key_requested\",\n        details: { keyId: response.key_id, keyLength },\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      });\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Request key error:\", error);\n      res.status(400).json({ message: \"Failed to request key\" });\n    }\n  });\n\n  // Email routes\n  app.get(\"/api/emails\", requireAuth, async (req, res) => {\n    try {\n      const folder = req.query.folder as string || \"inbox\";\n      const messages = await storage.getMessagesByUser(req.session.userId, folder);\n      \n      res.json(messages);\n    } catch (error) {\n      console.error(\"Get emails error:\", error);\n      res.status(500).json({ message: \"Failed to get emails\" });\n    }\n  });\n\n  app.get(\"/api/emails/:messageId\", requireAuth, async (req, res) => {\n    try {\n      const { messageId } = req.params;\n      const message = await storage.getMessage(messageId);\n      \n      if (!message || message.userId !== req.session.userId) {\n        return res.status(404).json({ message: \"Message not found\" });\n      }\n\n      res.json(message);\n    } catch (error) {\n      console.error(\"Get email error:\", error);\n      res.status(500).json({ message: \"Failed to get email\" });\n    }\n  });\n\n  app.post(\"/api/emails/send\", requireAuth, async (req, res) => {\n    try {\n      const sendSchema = z.object({\n        to: z.string().email(),\n        subject: z.string(),\n        body: z.string(),\n        securityLevel: z.nativeEnum(SecurityLevel),\n        attachments: z.array(z.object({\n          filename: z.string(),\n          content: z.string(), // base64\n          contentType: z.string()\n        })).optional()\n      });\n\n      const emailData = sendSchema.parse(req.body);\n      const user = await storage.getUser(req.session.userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Convert base64 attachments to Buffer\n      const attachments = emailData.attachments?.map(att => ({\n        filename: att.filename,\n        content: Buffer.from(att.content, 'base64'),\n        contentType: att.contentType\n      }));\n\n      await emailService.sendEmail(user, {\n        to: emailData.to,\n        subject: emailData.subject,\n        body: emailData.body,\n        attachments,\n        securityLevel: emailData.securityLevel\n      });\n\n      res.json({ message: \"Email sent successfully\" });\n    } catch (error) {\n      console.error(\"Send email error:\", error);\n      res.status(500).json({ message: \"Failed to send email\" });\n    }\n  });\n\n  app.post(\"/api/emails/:messageId/decrypt\", requireAuth, async (req, res) => {\n    try {\n      const { messageId } = req.params;\n      const result = await emailService.decryptEmail(messageId, req.session.userId);\n      \n      if (!result || (typeof result === 'object' && !result.success)) {\n        return res.status(400).json({ message: \"Failed to decrypt email\" });\n      }\n\n      res.json({ \n        message: \"Email decrypted successfully\",\n        success: true\n      });\n    } catch (error) {\n      console.error(\"Decrypt email error:\", error);\n      res.status(500).json({ message: \"Failed to decrypt email\" });\n    }\n  });\n\n  \n\n  // Audit logs\n  app.get(\"/api/audit\", requireAuth, async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const logs = await storage.getAuditLogs(req.session.userId, limit);\n      \n      res.json(logs);\n    } catch (error) {\n      console.error(\"Get audit logs error:\", error);\n      res.status(500).json({ message: \"Failed to get audit logs\" });\n    }\n  });\n\n  // User settings\n  app.put(\"/api/user/settings\", requireAuth, async (req, res) => {\n    try {\n      const settingsSchema = z.object({\n        defaultSecurityLevel: z.nativeEnum(SecurityLevel).optional(),\n        smtpConfig: z.object({}).optional(),\n        imapConfig: z.object({}).optional()\n      });\n\n      const settings = settingsSchema.parse(req.body);\n      \n      const updatedUser = await storage.updateUser(req.session.userId, settings);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      await storage.createAuditLog({\n        userId: req.session.userId,\n        action: \"settings_updated\",\n        details: settings,\n        ipAddress: req.ip,\n        userAgent: req.get('User-Agent')\n      });\n\n      res.json({ message: \"Settings updated successfully\" });\n    } catch (error) {\n      console.error(\"Update settings error:\", error);\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  // Periodic key pool maintenance\n  setInterval(async () => {\n    try {\n      await kmeSimulator.maintainKeyPool();\n    } catch (error) {\n      console.error(\"Key pool maintenance error:\", error);\n    }\n  }, 5 * 60 * 1000); // Every 5 minutes\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12021},"server/storage.ts":{"content":"import {\n  users,\n  messages,\n  auditLogs,\n  quantumKeys,\n  keyRequests,\n  type User,\n  type Message,\n  type AuditLog,\n  type QuantumKey,\n  type KeyRequest,\n  type InsertUser,\n  type InsertMessage,\n  type InsertAuditLog,\n  type InsertQuantumKey,\n  type InsertKeyRequest\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Message methods\n  getMessagesByUser(userId: string, folder?: string, limit?: number): Promise<Message[]>;\n  getMessage(id: string): Promise<Message | undefined>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  updateMessage(id: string, updates: Partial<Message>): Promise<Message | undefined>;\n  deleteMessage(id: string): Promise<boolean>;\n\n  // Quantum key methods\n  getQuantumKey(keyId: string): Promise<QuantumKey | undefined>;\n  getActiveKeys(): Promise<QuantumKey[]>;\n  createQuantumKey(key: InsertQuantumKey): Promise<QuantumKey>;\n  updateQuantumKey(keyId: string, updates: Partial<QuantumKey>): Promise<QuantumKey | undefined>;\n  consumeKey(keyId: string, bytes: number): Promise<boolean>;\n\n  // Audit log methods\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(userId?: string, limit?: number): Promise<AuditLog[]>;\n\n  // Key request methods\n  createKeyRequest(request: InsertKeyRequest): Promise<KeyRequest>;\n  getKeyRequest(requestId: string): Promise<KeyRequest | undefined>;\n  updateKeyRequest(requestId: string, updates: Partial<KeyRequest>): Promise<KeyRequest | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  // Message methods\n  async getMessagesByUser(userId: string, folder = \"inbox\", limit = 50): Promise<Message[]> {\n    const messagesList = await db\n      .select()\n      .from(messages)\n      .where(and(eq(messages.userId, userId), eq(messages.folder, folder)))\n      .orderBy(desc(messages.receivedAt))\n      .limit(limit);\n\n    console.log(`Retrieved ${messagesList.length} messages for user ${userId} in folder ${folder}`);\n    return messagesList;\n  }\n\n  async getMessage(id: string): Promise<Message | undefined> {\n    const [message] = await db.select().from(messages).where(eq(messages.id, id));\n    return message || undefined;\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  async updateMessage(id: string, updates: Partial<Message>): Promise<Message | undefined> {\n    const [message] = await db\n      .update(messages)\n      .set(updates)\n      .where(eq(messages.id, id))\n      .returning();\n    return message || undefined;\n  }\n\n  async deleteMessage(id: string): Promise<boolean> {\n    const result = await db.delete(messages).where(eq(messages.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Quantum key methods\n  async getQuantumKey(keyId: string): Promise<QuantumKey | undefined> {\n    const [key] = await db.select().from(quantumKeys).where(eq(quantumKeys.keyId, keyId));\n    return key || undefined;\n  }\n\n  async getActiveKeys(): Promise<QuantumKey[]> {\n    return await db\n      .select()\n      .from(quantumKeys)\n      .where(and(eq(quantumKeys.isActive, true)))\n      .orderBy(quantumKeys.createdAt);\n  }\n\n  async createQuantumKey(insertKey: InsertQuantumKey): Promise<QuantumKey> {\n    const [key] = await db\n      .insert(quantumKeys)\n      .values(insertKey)\n      .returning();\n    return key;\n  }\n\n  async updateQuantumKey(keyId: string, updates: Partial<QuantumKey>): Promise<QuantumKey | undefined> {\n    const [key] = await db\n      .update(quantumKeys)\n      .set(updates)\n      .where(eq(quantumKeys.keyId, keyId))\n      .returning();\n    return key || undefined;\n  }\n\n  async consumeKey(keyId: string, bytes: number): Promise<boolean> {\n    const key = await this.getQuantumKey(keyId);\n    if (!key || !key.isActive) return false;\n\n    const newConsumedBytes = (key.consumedBytes || 0) + bytes;\n    if (newConsumedBytes > key.maxConsumptionBytes) return false;\n\n    await this.updateQuantumKey(keyId, {\n      consumedBytes: newConsumedBytes,\n      isActive: newConsumedBytes < key.maxConsumptionBytes\n    });\n\n    return true;\n  }\n\n  async updateQuantumKeyUsage(keyId: string, consumedBytes: number): Promise<boolean> {\n    const key = await this.getQuantumKey(keyId);\n    if (!key) return false;\n\n    const newConsumedBytes = (key.consumedBytes || 0) + consumedBytes;\n    if (newConsumedBytes > key.maxConsumptionBytes) return false;\n\n    await this.updateQuantumKey(keyId, {\n      consumedBytes: newConsumedBytes,\n      isActive: newConsumedBytes < key.maxConsumptionBytes\n    });\n\n    return true;\n  }\n\n  // Audit log methods\n  async createAuditLog(insertLog: InsertAuditLog): Promise<AuditLog> {\n    const [log] = await db\n      .insert(auditLogs)\n      .values(insertLog)\n      .returning();\n    return log;\n  }\n\n  async getAuditLogs(userId?: string, limit = 50): Promise<AuditLog[]> {\n    if (userId) {\n      return await db\n        .select()\n        .from(auditLogs)\n        .where(eq(auditLogs.userId, userId))\n        .orderBy(desc(auditLogs.timestamp))\n        .limit(limit);\n    } else {\n      return await db\n        .select()\n        .from(auditLogs)\n        .orderBy(desc(auditLogs.timestamp))\n        .limit(limit);\n    }\n  }\n\n  // Key request methods\n  async createKeyRequest(insertRequest: InsertKeyRequest): Promise<KeyRequest> {\n    const [request] = await db\n      .insert(keyRequests)\n      .values(insertRequest)\n      .returning();\n    return request;\n  }\n\n  async getKeyRequest(requestId: string): Promise<KeyRequest | undefined> {\n    const [request] = await db.select().from(keyRequests).where(eq(keyRequests.requestId, requestId));\n    return request || undefined;\n  }\n\n  async updateKeyRequest(requestId: string, updates: Partial<KeyRequest>): Promise<KeyRequest | undefined> {\n    const [request] = await db\n      .update(keyRequests)\n      .set(updates)\n      .where(eq(keyRequests.requestId, requestId))\n      .returning();\n    return request || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":7481},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  emailProvider: text(\"email_provider\").notNull(), // gmail, outlook, yahoo\n  smtpConfig: jsonb(\"smtp_config\"),\n  imapConfig: jsonb(\"imap_config\"),\n  defaultSecurityLevel: text(\"default_security_level\").default(\"level1\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  messageId: text(\"message_id\").notNull(), // email message ID\n  from: text(\"from\").notNull(),\n  to: text(\"to\").notNull(),\n  subject: text(\"subject\").notNull(),\n  body: text(\"body\"),\n  encryptedBody: text(\"encrypted_body\"),\n  securityLevel: text(\"security_level\").notNull(),\n  keyId: text(\"key_id\"),\n  isEncrypted: boolean(\"is_encrypted\").default(false),\n  isDecrypted: boolean(\"is_decrypted\").default(false),\n  metadata: jsonb(\"metadata\"),\n  attachments: jsonb(\"attachments\"),\n  encryptedAttachments: jsonb(\"encrypted_attachments\"),\n  receivedAt: timestamp(\"received_at\").defaultNow(),\n  folder: text(\"folder\").default(\"inbox\"), // inbox, sent, trash\n});\n\nexport const quantumKeys = pgTable(\"quantum_keys\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  keyId: text(\"key_id\").notNull().unique(),\n  keyMaterial: text(\"key_material\"), // base64 encoded\n  keyLength: integer(\"key_length\").notNull(),\n  consumedBytes: integer(\"consumed_bytes\").default(0),\n  maxConsumptionBytes: integer(\"max_consumption_bytes\").notNull(),\n  expiryTime: timestamp(\"expiry_time\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  action: text(\"action\").notNull(),\n  details: jsonb(\"details\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const keyRequests = pgTable(\"key_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requestId: text(\"request_id\").notNull().unique(),\n  keyLength: integer(\"key_length\").notNull(),\n  recipient: text(\"recipient\"),\n  status: text(\"status\").default(\"pending\"), // pending, delivered, consumed\n  deliveryUri: text(\"delivery_uri\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  sid: text(\"sid\").primaryKey(),\n  sess: jsonb(\"sess\").notNull(),\n  expire: timestamp(\"expire\").notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  receivedAt: true,\n});\n\nexport const insertQuantumKeySchema = createInsertSchema(quantumKeys).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertKeyRequestSchema = createInsertSchema(keyRequests).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type QuantumKey = typeof quantumKeys.$inferSelect;\nexport type InsertQuantumKey = z.infer<typeof insertQuantumKeySchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type KeyRequest = typeof keyRequests.$inferSelect;\nexport type InsertKeyRequest = z.infer<typeof insertKeyRequestSchema>;\n\n// Security levels enum\nexport enum SecurityLevel {\n  LEVEL1_OTP = \"level1\",\n  LEVEL2_AES = \"level2\", \n  LEVEL3_PQC = \"level3\",\n  LEVEL4_PLAIN = \"level4\"\n}\n\n// Email provider enum\nexport enum EmailProvider {\n  GMAIL = \"gmail\",\n  OUTLOOK = \"outlook\", \n  YAHOO = \"yahoo\"\n}\n","size_bytes":4480},"client/src/App.tsx":{"content":"import { Route, Switch, useLocation } from \"wouter\";\nimport { QueryClient, QueryClientProvider, useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { api } from \"@/lib/api\";\nimport Login from \"@/pages/login\";\nimport Inbox from \"@/pages/inbox\";\nimport Compose from \"@/pages/compose\";\nimport KeyDashboard from \"@/pages/key-dashboard\";\nimport Settings from \"@/pages/settings\";\nimport Audit from \"@/pages/audit\";\nimport NotFound from \"@/pages/not-found\";\n\nconst queryClient = new QueryClient();\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const [location, setLocation] = useLocation();\n  const { data: userInfo, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => api.getMe(),\n    retry: false,\n    staleTime: 0\n  });\n\n  useEffect(() => {\n    if (!isLoading && (!userInfo?.user || error)) {\n      setLocation(\"/login\");\n    }\n  }, [userInfo, isLoading, error, setLocation]);\n\n  if (isLoading) {\n    return <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n    </div>;\n  }\n\n  if (!userInfo?.user || error) {\n    return null;\n  }\n\n  return <Component />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Login} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/inbox\">\n        <ProtectedRoute component={Inbox} />\n      </Route>\n      <Route path=\"/compose\">\n        <ProtectedRoute component={Compose} />\n      </Route>\n      <Route path=\"/keys\">\n        <ProtectedRoute component={KeyDashboard} />\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute component={Settings} />\n      </Route>\n      <Route path=\"/audit\">\n        <ProtectedRoute component={Audit} />\n      </Route>\n      <Route path=\"/sent\">\n        <ProtectedRoute component={Inbox} />\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Redirect to login if on root path\n    if (location === \"/\") {\n      setLocation(\"/login\");\n    }\n  }, [location, setLocation]);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"min-h-screen bg-background\">\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/inbox\" component={Inbox} />\n          <Route path=\"/compose\" component={Compose} />\n          <Route path=\"/keys\" component={KeyDashboard} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/audit\" component={Audit} />\n          <Route path=\"/sent\" component={Inbox} />\n          <Route path=\"/\" component={Login} />\n          <Route component={NotFound} />\n        </Switch>\n        <Toaster />\n      </div>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":2988},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(188.7, 95%, 30.1%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(188.7, 95%, 30.1%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(188.7, 95%, 30.1%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(188.7, 95%, 30.1%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom quantum security indicator animations */\n.quantum-pulse {\n  animation: quantum-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n@keyframes quantum-pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n/* Security level color customizations */\n.security-level-1 {\n  @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;\n}\n\n.security-level-2 {\n  @apply bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200;\n}\n\n.security-level-3 {\n  @apply bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200;\n}\n\n.security-level-4 {\n  @apply bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200;\n}\n\n/* Custom scrollbar for better UX */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--foreground));\n}\n\n/* Prevent file input interference with navigation */\ninput[type=\"file\"] {\n  pointer-events: all !important;\n}\n\ninput[type=\"file\"]:not(:hover) {\n  pointer-events: none !important;\n}\n\n.file-upload-area:hover input[type=\"file\"] {\n  pointer-events: all !important;\n}\n\n/* Quantum key visualization */\n.key-capacity-bar {\n  background: linear-gradient(90deg, hsl(var(--accent)) 0%, hsl(var(--primary)) 100%);\n  transition: width 0.3s ease-in-out;\n}\n\n/* Email encryption status indicators */\n.encryption-status-encrypted {\n  @apply text-amber-600 bg-amber-50 dark:bg-amber-950 dark:text-amber-400;\n}\n\n.encryption-status-decrypted {\n  @apply text-green-600 bg-green-50 dark:bg-green-950 dark:text-green-400;\n}\n\n.encryption-status-plain {\n  @apply text-gray-600 bg-gray-50 dark:bg-gray-950 dark:text-gray-400;\n}\n\n/* Enhance focus states for accessibility */\n.focus-quantum {\n  @apply focus:ring-2 focus:ring-accent focus:ring-offset-2 focus:outline-none;\n}\n\n/* Loading state enhancements */\n.quantum-loading {\n  background: linear-gradient(90deg, hsl(var(--muted)) 25%, hsl(var(--accent)) 50%, hsl(var(--muted)) 75%);\n  background-size: 200% 100%;\n  animation: quantum-shimmer 2s infinite;\n}\n\n@keyframes quantum-shimmer {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n","size_bytes":7182},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/cryptoEngine.ts":{"content":"import { randomBytes, createHash, createHmac } from \"crypto\";\nimport { SecurityLevel } from \"@shared/schema\";\nimport { storage } from \"../storage\";\nimport { kmeSimulator } from \"./kmeSimulator\";\n\nexport interface EncryptionResult {\n  encryptedData: string;\n  keyId?: string;\n  metadata: Record<string, any>;\n}\n\nexport interface DecryptionResult {\n  decryptedData: string;\n  verified: boolean;\n}\n\nexport class CryptoEngine {\n  /**\n   * Encrypt data using the specified security level\n   */\n  async encrypt(\n    data: string | Buffer, \n    securityLevel: SecurityLevel,\n    recipient?: string\n  ): Promise<EncryptionResult> {\n    const dataBuffer = Buffer.isBuffer(data) ? data : Buffer.from(data, 'utf8');\n    \n    switch (securityLevel) {\n      case SecurityLevel.LEVEL1_OTP:\n        return this.encryptOTP(dataBuffer, recipient);\n      case SecurityLevel.LEVEL2_AES:\n        return this.encryptAES(dataBuffer, recipient);\n      case SecurityLevel.LEVEL3_PQC:\n        return this.encryptPQC(dataBuffer, recipient);\n      case SecurityLevel.LEVEL4_PLAIN:\n        return this.encryptPlain(dataBuffer);\n      default:\n        throw new Error(`Unsupported security level: ${securityLevel}`);\n    }\n  }\n\n  /**\n   * Decrypt data using the stored metadata\n   */\n  async decrypt(\n    encryptedData: string,\n    metadata: Record<string, any>\n  ): Promise<DecryptionResult> {\n    const securityLevel = metadata.securityLevel as SecurityLevel;\n    \n    switch (securityLevel) {\n      case SecurityLevel.LEVEL1_OTP:\n        return this.decryptOTP(encryptedData, metadata);\n      case SecurityLevel.LEVEL2_AES:\n        return this.decryptAES(encryptedData, metadata);\n      case SecurityLevel.LEVEL3_PQC:\n        return this.decryptPQC(encryptedData, metadata);\n      case SecurityLevel.LEVEL4_PLAIN:\n        return this.decryptPlain(encryptedData);\n      default:\n        throw new Error(`Unsupported security level: ${securityLevel}`);\n    }\n  }\n\n  /**\n   * Level 1: One-Time Pad encryption using quantum keys\n   */\n  private async encryptOTP(data: Buffer, recipient?: string): Promise<EncryptionResult> {\n    // Request quantum key from KME\n    const keyRequest = {\n      request_id: randomBytes(16).toString('hex'),\n      key_length_bits: data.length * 8,\n      recipient\n    };\n\n    const keyResponse = await kmeSimulator.requestKey(keyRequest);\n    const keyMaterial = await kmeSimulator.getKey(keyResponse.key_id);\n    \n    if (!keyMaterial) {\n      throw new Error(\"Failed to obtain quantum key material\");\n    }\n\n    if (!keyMaterial.key_material) {\n      throw new Error(\"Key material is empty or undefined\");\n    }\n\n    const keyBuffer = Buffer.from(keyMaterial.key_material, 'base64');\n    \n    // XOR data with quantum key (OTP)\n    const encrypted = Buffer.alloc(data.length);\n    for (let i = 0; i < data.length; i++) {\n      encrypted[i] = data[i] ^ keyBuffer[i];\n    }\n\n    // Generate HMAC for authentication\n    const hmac = createHmac('sha256', keyBuffer.slice(data.length, data.length + 32));\n    hmac.update(encrypted);\n    const authTag = hmac.digest();\n\n    // Combine encrypted data with auth tag\n    const result = Buffer.concat([encrypted, authTag]);\n\n    // Acknowledge key consumption\n    await kmeSimulator.acknowledgeKeyUsage(keyResponse.key_id, {\n      consumed_bytes: data.length + 32, // data + HMAC key\n      message_id: keyRequest.request_id\n    });\n\n    return {\n      encryptedData: result.toString('base64'),\n      keyId: keyResponse.key_id,\n      metadata: {\n        securityLevel: SecurityLevel.LEVEL1_OTP,\n        keyId: keyResponse.key_id,\n        dataLength: data.length,\n        algorithm: 'OTP-XOR',\n        authAlgorithm: 'HMAC-SHA256'\n      }\n    };\n  }\n\n  /**\n   * Level 2: AES-GCM with quantum-seeded keys\n   */\n  private async encryptAES(data: Buffer, recipient?: string): Promise<EncryptionResult> {\n    // Request smaller quantum key for seeding\n    const keyRequest = {\n      request_id: randomBytes(16).toString('hex'),\n      key_length_bits: 256, // 32 bytes for seed\n      recipient\n    };\n\n    const keyResponse = await kmeSimulator.requestKey(keyRequest);\n    const keyMaterial = await kmeSimulator.getKey(keyResponse.key_id);\n    \n    if (!keyMaterial) {\n      throw new Error(\"Failed to obtain quantum key material\");\n    }\n\n    const seedBuffer = Buffer.from(keyMaterial.key_material, 'base64');\n    \n    // Derive AES key using HKDF\n    const aesKey = this.hkdf(seedBuffer, 32, 'QuMail-AES-Key');\n    const iv = randomBytes(12); // GCM IV\n\n    // Encrypt using AES-GCM (simulated with AES-CTR + HMAC)\n    const cipher = this.aesGCMEncrypt(data, aesKey, iv);\n\n    // Acknowledge key consumption\n    await kmeSimulator.acknowledgeKeyUsage(keyResponse.key_id, {\n      consumed_bytes: 32, // seed consumption\n      message_id: keyRequest.request_id\n    });\n\n    return {\n      encryptedData: Buffer.concat([iv, cipher.encrypted, cipher.authTag]).toString('base64'),\n      keyId: keyResponse.key_id,\n      metadata: {\n        securityLevel: SecurityLevel.LEVEL2_AES,\n        keyId: keyResponse.key_id,\n        algorithm: 'AES-256-GCM',\n        ivLength: 12\n      }\n    };\n  }\n\n  /**\n   * Level 3: Post-Quantum Cryptography hybrid (CRYSTALS-Kyber simulation)\n   */\n  private async encryptPQC(data: Buffer, recipient?: string): Promise<EncryptionResult> {\n    // Simulate CRYSTALS-Kyber KEM with quantum-seeded keys\n    const keyRequest = {\n      request_id: randomBytes(16).toString('hex'),\n      key_length_bits: 768, // Kyber-768 equivalent\n      recipient\n    };\n\n    const keyResponse = await kmeSimulator.requestKey(keyRequest);\n    const keyMaterial = await kmeSimulator.getKey(keyResponse.key_id);\n    \n    if (!keyMaterial) {\n      throw new Error(\"Failed to obtain quantum key material\");\n    }\n\n    const seedBuffer = Buffer.from(keyMaterial.key_material, 'base64');\n    \n    // Simulate Kyber KEM with quantum seed\n    const kyberResult = this.simulateKyberKEM(seedBuffer);\n    \n    // Use derived key for AES-GCM encryption\n    const encryptedData = this.aesGCMEncrypt(data, kyberResult.sharedSecret, kyberResult.iv);\n\n    await kmeSimulator.acknowledgeKeyUsage(keyResponse.key_id, {\n      consumed_bytes: 96, // Kyber seed consumption\n      message_id: keyRequest.request_id\n    });\n\n    return {\n      encryptedData: Buffer.concat([\n        kyberResult.iv, \n        kyberResult.ciphertext, \n        encryptedData.encrypted, \n        encryptedData.authTag\n      ]).toString('base64'),\n      keyId: keyResponse.key_id,\n      metadata: {\n        securityLevel: SecurityLevel.LEVEL3_PQC,\n        keyId: keyResponse.key_id,\n        algorithm: 'CRYSTALS-Kyber-768-Simulated',\n        kemCiphertextLength: kyberResult.ciphertext.length,\n        ivLength: kyberResult.iv.length\n      }\n    };\n  }\n\n  /**\n   * Level 4: Plain text (no encryption)\n   */\n  private async encryptPlain(data: Buffer): Promise<EncryptionResult> {\n    return {\n      encryptedData: data.toString('base64'),\n      metadata: {\n        securityLevel: SecurityLevel.LEVEL4_PLAIN,\n        algorithm: 'none'\n      }\n    };\n  }\n\n  // Decryption methods\n  private async decryptOTP(encryptedData: string, metadata: Record<string, any>): Promise<DecryptionResult> {\n    const dataBuffer = Buffer.from(encryptedData, 'base64');\n    const dataLength = metadata.dataLength;\n    \n    if (!dataLength || typeof dataLength !== 'number') {\n      throw new Error(`Invalid data length in metadata: ${dataLength}`);\n    }\n    \n    const encrypted = dataBuffer.slice(0, dataLength);\n    const authTag = dataBuffer.slice(dataLength);\n\n    const keyMaterial = await kmeSimulator.getKey(metadata.keyId);\n    if (!keyMaterial) {\n      throw new Error(\"Quantum key not available for decryption\");\n    }\n\n    const keyBuffer = Buffer.from(keyMaterial.key_material, 'base64');\n    \n    // Verify HMAC\n    const hmac = createHmac('sha256', keyBuffer.slice(dataLength, dataLength + 32));\n    hmac.update(encrypted);\n    const expectedTag = hmac.digest();\n    \n    const verified = expectedTag.equals(authTag);\n    \n    // XOR to decrypt\n    if (dataLength <= 0) {\n      throw new Error(`Invalid data length for decryption: ${dataLength}`);\n    }\n    \n    const decrypted = Buffer.alloc(dataLength);\n    for (let i = 0; i < dataLength; i++) {\n      decrypted[i] = encrypted[i] ^ keyBuffer[i];\n    }\n\n    return {\n      decryptedData: decrypted.toString('utf8'),\n      verified\n    };\n  }\n\n  private async decryptAES(encryptedData: string, metadata: Record<string, any>): Promise<DecryptionResult> {\n    const dataBuffer = Buffer.from(encryptedData, 'base64');\n    const iv = dataBuffer.slice(0, 12);\n    const encrypted = dataBuffer.slice(12, -16);\n    const authTag = dataBuffer.slice(-16);\n\n    const keyMaterial = await kmeSimulator.getKey(metadata.keyId);\n    if (!keyMaterial) {\n      throw new Error(\"Quantum key not available for decryption\");\n    }\n\n    const seedBuffer = Buffer.from(keyMaterial.key_material, 'base64');\n    const aesKey = this.hkdf(seedBuffer, 32, 'QuMail-AES-Key');\n\n    const result = this.aesGCMDecrypt(encrypted, aesKey, iv, authTag);\n\n    return {\n      decryptedData: result.decrypted.toString('utf8'),\n      verified: result.verified\n    };\n  }\n\n  private async decryptPQC(encryptedData: string, metadata: Record<string, any>): Promise<DecryptionResult> {\n    const dataBuffer = Buffer.from(encryptedData, 'base64');\n    const ivLength = metadata.ivLength || 12;\n    const kemCiphertextLength = metadata.kemCiphertextLength || 1088; // Kyber-768 ciphertext length\n    \n    const iv = dataBuffer.slice(0, ivLength);\n    const kemCiphertext = dataBuffer.slice(ivLength, ivLength + kemCiphertextLength);\n    const encrypted = dataBuffer.slice(ivLength + kemCiphertextLength, -16);\n    const authTag = dataBuffer.slice(-16);\n\n    const keyMaterial = await kmeSimulator.getKey(metadata.keyId);\n    if (!keyMaterial) {\n      throw new Error(\"Quantum key not available for decryption\");\n    }\n\n    const seedBuffer = Buffer.from(keyMaterial.key_material, 'base64');\n    const kyberResult = this.simulateKyberDecapsulation(seedBuffer, kemCiphertext);\n\n    const result = this.aesGCMDecrypt(encrypted, kyberResult.sharedSecret, iv, authTag);\n\n    return {\n      decryptedData: result.decrypted.toString('utf8'),\n      verified: result.verified\n    };\n  }\n\n  private async decryptPlain(encryptedData: string): Promise<DecryptionResult> {\n    return {\n      decryptedData: Buffer.from(encryptedData, 'base64').toString('utf8'),\n      verified: true\n    };\n  }\n\n  // Utility methods\n  private hkdf(ikm: Buffer, length: number, info: string): Buffer {\n    const hash = createHash('sha256');\n    hash.update(ikm);\n    hash.update(info);\n    return hash.digest().slice(0, length);\n  }\n\n  private aesGCMEncrypt(data: Buffer, key: Buffer, iv: Buffer) {\n    // Simplified AES-GCM simulation using XOR and HMAC\n    const encrypted = Buffer.alloc(data.length);\n    const keyStream = this.generateKeyStream(key, iv, data.length);\n    \n    for (let i = 0; i < data.length; i++) {\n      encrypted[i] = data[i] ^ keyStream[i];\n    }\n\n    const hmac = createHmac('sha256', key);\n    hmac.update(iv);\n    hmac.update(encrypted);\n    const authTag = hmac.digest().slice(0, 16);\n\n    return { encrypted, authTag };\n  }\n\n  private aesGCMDecrypt(encrypted: Buffer, key: Buffer, iv: Buffer, authTag: Buffer) {\n    // Verify auth tag\n    const hmac = createHmac('sha256', key);\n    hmac.update(iv);\n    hmac.update(encrypted);\n    const expectedTag = hmac.digest().slice(0, 16);\n    const verified = expectedTag.equals(authTag);\n\n    // Decrypt\n    const decrypted = Buffer.alloc(encrypted.length);\n    const keyStream = this.generateKeyStream(key, iv, encrypted.length);\n    \n    for (let i = 0; i < encrypted.length; i++) {\n      decrypted[i] = encrypted[i] ^ keyStream[i];\n    }\n\n    return { decrypted, verified };\n  }\n\n  private generateKeyStream(key: Buffer, iv: Buffer, length: number): Buffer {\n    const stream = Buffer.alloc(length);\n    let counter = 0;\n    \n    for (let i = 0; i < length; i += 32) {\n      const hash = createHash('sha256');\n      hash.update(key);\n      hash.update(iv);\n      hash.update(Buffer.from([counter++]));\n      const block = hash.digest();\n      \n      const copyLength = Math.min(32, length - i);\n      block.copy(stream, i, 0, copyLength);\n    }\n    \n    return stream;\n  }\n\n  private simulateKyberKEM(seed: Buffer) {\n    // Simulate CRYSTALS-Kyber-768 Key Encapsulation\n    const kyberSeed = seed.slice(0, 64);\n    \n    // Generate Kyber public/private key pair from quantum seed\n    const privateKey = this.hkdf(kyberSeed, 32, 'Kyber-PrivateKey');\n    const publicKey = this.hkdf(kyberSeed, 32, 'Kyber-PublicKey');\n    \n    // Simulate encapsulation\n    const ephemeralKey = randomBytes(32);\n    const sharedSecret = this.hkdf(Buffer.concat([privateKey, ephemeralKey]), 32, 'Kyber-SharedSecret');\n    const ciphertext = randomBytes(1088); // Kyber-768 ciphertext size\n    const iv = randomBytes(12);\n    \n    // Mix quantum randomness into ciphertext\n    for (let i = 0; i < Math.min(ciphertext.length, seed.length - 64); i++) {\n      ciphertext[i] ^= seed[64 + i];\n    }\n    \n    return { sharedSecret, ciphertext, iv, publicKey };\n  }\n\n  private simulateKyberDecapsulation(seed: Buffer, ciphertext: Buffer) {\n    // Simulate CRYSTALS-Kyber-768 decapsulation\n    const kyberSeed = seed.slice(0, 64);\n    const privateKey = this.hkdf(kyberSeed, 32, 'Kyber-PrivateKey');\n    \n    // Extract ephemeral key from ciphertext (simulated)\n    const ephemeralKey = this.hkdf(ciphertext.slice(0, 32), 32, 'Kyber-Ephemeral');\n    const sharedSecret = this.hkdf(Buffer.concat([privateKey, ephemeralKey]), 32, 'Kyber-SharedSecret');\n    \n    return { sharedSecret };\n  }\n}\n\nexport const cryptoEngine = new CryptoEngine();\n","size_bytes":13751},"server/services/emailService.ts":{"content":"import { SecurityLevel, type User, type InsertMessage } from \"@shared/schema\";\nimport { storage } from \"../storage\";\nimport { cryptoEngine } from \"./cryptoEngine\";\n\nexport interface EmailAttachment {\n  filename: string;\n  content: Buffer;\n  contentType: string;\n}\n\nexport interface SendEmailOptions {\n  to: string;\n  subject: string;\n  body: string;\n  attachments?: EmailAttachment[];\n  securityLevel: SecurityLevel;\n}\n\nexport class EmailService {\n\n  async sendEmail(user: User, options: SendEmailOptions): Promise<void> {\n    try {\n      // Encrypt email content based on security level\n      let encryptedBody: string | null = null;\n      let encryptedAttachments: any[] = [];\n      let keyId: string | undefined;\n      let metadata: Record<string, any> = {};\n\n      if (options.securityLevel !== SecurityLevel.LEVEL4_PLAIN) {\n        const bodyEncryption = await cryptoEngine.encrypt(\n          options.body,\n          options.securityLevel,\n          options.to\n        );\n\n        encryptedBody = bodyEncryption.encryptedData;\n        keyId = bodyEncryption.keyId;\n        metadata = bodyEncryption.metadata;\n\n        // Encrypt attachments if present\n        if (options.attachments && options.attachments.length > 0) {\n          for (const attachment of options.attachments) {\n            const encryptedAttachment = await cryptoEngine.encrypt(\n              attachment.content,\n              options.securityLevel,\n              options.to\n            );\n\n            encryptedAttachments.push({\n              filename: attachment.filename,\n              originalSize: attachment.content.length,\n              contentType: attachment.contentType,\n              encryptedData: encryptedAttachment.encryptedData,\n              keyId: encryptedAttachment.keyId\n            });\n          }\n        }\n      }\n\n      console.log(`Sending internal QuMail message:`, {\n        from: user.email,\n        to: options.to,\n        subject: options.subject,\n        securityLevel: options.securityLevel,\n        encrypted: options.securityLevel !== SecurityLevel.LEVEL4_PLAIN,\n        keyId: keyId\n      });\n\n      // Find recipient user\n      const recipient = await storage.getUserByEmail(options.to);\n      if (!recipient) {\n        throw new Error(`Recipient ${options.to} not found on QuMail platform`);\n      }\n\n      // Store message in sender's sent folder (always decrypted for sender)\n      await storage.createMessage({\n        userId: user.id,\n        messageId: `sent-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        from: user.email,\n        to: options.to,\n        subject: options.subject,\n        body: options.body, // Always store original body for sender\n        encryptedBody: encryptedBody,\n        securityLevel: options.securityLevel,\n        keyId,\n        isEncrypted: options.securityLevel !== SecurityLevel.LEVEL4_PLAIN,\n        isDecrypted: true, // Sender can always see their own messages\n        metadata: metadata,\n        attachments: options.attachments ? options.attachments.map(a => ({\n          filename: a.filename,\n          contentType: a.contentType,\n          size: a.content.length\n        })) : null,\n        encryptedAttachments: encryptedAttachments.length > 0 ? encryptedAttachments : null,\n        folder: \"sent\"\n      });\n\n      // Only store in recipient's inbox if sender and recipient are different users\n      if (recipient.id !== user.id) {\n        await storage.createMessage({\n          userId: recipient.id,\n          messageId: `inbox-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          from: user.email,\n          to: options.to,\n          subject: options.subject,\n          body: options.securityLevel === SecurityLevel.LEVEL4_PLAIN ? options.body : null,\n          encryptedBody: encryptedBody,\n          securityLevel: options.securityLevel,\n          keyId,\n          isEncrypted: options.securityLevel !== SecurityLevel.LEVEL4_PLAIN,\n          isDecrypted: options.securityLevel === SecurityLevel.LEVEL4_PLAIN,\n          metadata: metadata,\n          attachments: options.attachments ? options.attachments.map(a => ({\n            filename: a.filename,\n            contentType: a.contentType,\n            size: a.content.length\n          })) : null,\n          encryptedAttachments: encryptedAttachments.length > 0 ? encryptedAttachments : null,\n          folder: \"inbox\"\n        });\n      }\n\n      // Log the email send action\n      await storage.createAuditLog({\n        userId: user.id,\n        action: \"email_sent\",\n        details: {\n          to: options.to,\n          subject: options.subject,\n          securityLevel: options.securityLevel,\n          keyId,\n          attachmentCount: options.attachments?.length || 0,\n          recipientId: recipient.id\n        }\n      });\n\n      // Only log email received for different users\n      if (recipient.id !== user.id) {\n        await storage.createAuditLog({\n          userId: recipient.id,\n          action: \"email_received\",\n          details: {\n            from: user.email,\n            subject: options.subject,\n            securityLevel: options.securityLevel,\n            keyId\n          }\n        });\n      }\n\n    } catch (error) {\n      console.error(\"Failed to send email:\", error);\n      throw new Error(`Failed to send email: ${error.message}`);\n    }\n  }\n\n  async fetchEmails(user: User, folder = \"inbox\", limit = 50): Promise<any[]> {\n    try {\n      // Fetch emails from internal database\n      const messages = await storage.getMessagesByUser(user.id, folder, limit);\n      return messages;\n    } catch (error) {\n      console.error(\"Failed to fetch emails:\", error);\n      throw new Error(`Failed to fetch emails: ${error.message}`);\n    }\n  }\n\n\n\n  async decryptEmail(messageId: string, userId: string): Promise<boolean> {\n    try {\n      const message = await storage.getMessage(messageId);\n\n      if (!message || message.userId !== userId) {\n        console.error(`Message not found or unauthorized: messageId=${messageId}, userId=${userId}`);\n        return false;\n      }\n\n      if (!message.isEncrypted || message.isDecrypted) {\n        console.log(`Message already decrypted or not encrypted: messageId=${messageId}`);\n        return true; // Already decrypted or not encrypted\n      }\n\n      if (!message.encryptedBody) {\n        console.error(`No encrypted body found for message: messageId=${messageId}`);\n        return false;\n      }\n\n      const metadata = message.metadata as Record<string, any>;\n      console.log(`Decrypting message ${messageId} with metadata:`, metadata);\n\n      const decryptionResult = await cryptoEngine.decrypt(message.encryptedBody, metadata);\n\n      if (decryptionResult.verified) {\n        await storage.updateMessage(messageId, {\n          body: decryptionResult.decryptedData,\n          isDecrypted: true\n        });\n\n        await storage.createAuditLog({\n          userId,\n          action: \"email_decrypted\",\n          details: {\n            messageId,\n            securityLevel: message.securityLevel,\n            keyId: message.keyId\n          }\n        });\n\n        return {\n          success: true,\n          decryptedContent: decryptionResult.decryptedData\n        };\n      }\n\n      return {\n        success: false\n      };\n\n    } catch (error) {\n      console.error(\"Failed to decrypt email:\", error);\n      return false;\n    }\n  }\n}\n\nexport const emailService = new EmailService();","size_bytes":7398},"server/services/kmeSimulator.ts":{"content":"import crypto from \"crypto\";\nimport { storage } from \"../storage\";\n\ninterface KeyRequest {\n  request_id: string;\n  key_length_bits: number;\n  recipient?: string;\n}\n\ninterface KeyResponse {\n  key_id: string;\n  delivery_uri: string;\n  status: string;\n}\n\ninterface KeyMaterial {\n  key_id: string;\n  key_material: string; // base64 encoded\n  timestamp: string;\n}\n\ninterface KeyPoolStats {\n  availableKeys: number;\n  totalMB: number;\n  remainingMB: number;\n  utilizationPercent: number;\n}\n\ninterface QuantumKeyEntry {\n  keyId: string;\n  keyMaterial: string; // base64 encoded\n  keyLength: number;\n  expiryTime: Date;\n  consumedBytes: number;\n  maxConsumptionBytes: number;\n  isActive: boolean;\n  createdAt: Date;\n}\n\n// Assuming QuantumKeyMaterial interface is defined elsewhere or implicitly used in changes\ninterface QuantumKeyMaterial {\n  key_id: string;\n  key_material: string;\n  key_length_bits: number;\n  expiry_time: number; // Unix timestamp in seconds\n  consumed_bytes: number;\n}\n\n\nclass KMESimulator {\n  private keyPool: Map<string, QuantumKeyMaterial> = new Map();\n  private keyStore: Map<string, QuantumKeyEntry> = new Map();\n  private keyPoolStats = {\n    totalKeys: 0,\n    totalMB: 0,\n    remainingMB: 0,\n    utilizationPercent: 0\n  };\n\n  private readonly KEY_EXPIRY_MS = 24 * 60 * 60 * 1000; // 24 hours\n  private readonly KEY_EXPIRY_MINUTES = 24 * 60; // 24 hours in minutes\n  private readonly POOL_SIZE_TARGET = 10; // Target number of keys in pool\n  private readonly DEFAULT_KEY_LENGTH = 8192; // 8KB keys by default\n  private readonly MAX_KEY_SIZE_BYTES = 1024 * 1024; // 1MB max key size\n  private readonly POOL_SIZE_MB = 100; // 100MB pool size\n\n  constructor() {\n    this.initializeKeyPool();\n  }\n\n  private async initializeKeyPool() {\n    console.log(\"Initializing KME key pool...\");\n\n    // Load existing keys from storage first\n    await this.loadExistingKeys();\n\n    // Generate additional keys if needed\n    const currentPoolSize = this.keyPool.size;\n    const targetPoolSize = 10;\n\n    if (currentPoolSize < targetPoolSize) {\n      const keysToGenerate = targetPoolSize - currentPoolSize;\n      for (let i = 0; i < keysToGenerate; i++) {\n        await this.generateQuantumKey();\n      }\n    }\n\n    this.updateKeyPoolStats();\n    console.log(`Key pool initialized with ${this.keyPool.size} keys`);\n  }\n\n  private async loadExistingKeys() {\n    try {\n      const storage = (await import('../storage')).storage;\n      const existingKeys = await storage.getActiveKeys();\n\n      for (const key of existingKeys) {\n        if (key.keyMaterial) {\n          this.keyPool.set(key.keyId, {\n            key_id: key.keyId,\n            key_material: key.keyMaterial,\n            key_length_bits: key.keyLength * 8,\n            expiry_time: Math.floor(key.expiryTime.getTime() / 1000),\n            consumed_bytes: key.consumedBytes || 0\n          });\n        }\n      }\n\n      console.log(`Loaded ${existingKeys.length} existing keys from storage`);\n    } catch (error) {\n      console.log(\"No existing keys found, starting fresh\");\n    }\n  }\n\n\n  private generateQuantumKey(lengthBits: number = this.DEFAULT_KEY_LENGTH): string {\n    const lengthBytes = Math.ceil(lengthBits / 8);\n    const keyBuffer = crypto.randomBytes(lengthBytes);\n    const base64Key = keyBuffer.toString('base64');\n    console.log(`Generated quantum key: ${lengthBytes} bytes, base64 length: ${base64Key.length}`);\n    return base64Key;\n  }\n\n  async requestKey(request: KeyRequest): Promise<KeyResponse> {\n    try {\n      // Generate quantum key material\n      const keyLengthBits = request.key_length_bits || this.DEFAULT_KEY_LENGTH;\n      const keyLengthBytes = Math.ceil(keyLengthBits / 8);\n\n      if (keyLengthBytes > this.MAX_KEY_SIZE_BYTES) {\n        throw new Error(`Key size exceeds maximum of ${this.MAX_KEY_SIZE_BYTES} bytes`);\n      }\n\n      const quantumKeyMaterial = this.generateQuantumKey(keyLengthBits);\n\n      const keyId = `qkey-${Date.now()}-${crypto.randomBytes(8).toString('hex')}`;\n\n      // Calculate expiry time in seconds for storage\n      const expiryTimeSeconds = Math.floor((Date.now() + this.KEY_EXPIRY_MS) / 1000);\n\n      const storedKey: QuantumKeyEntry = {\n        keyId,\n        keyMaterial: quantumKeyMaterial, // Ensure this is the base64 encoded key\n        keyLength: keyLengthBytes,\n        expiryTime: new Date(Date.now() + this.KEY_EXPIRY_MS),\n        consumedBytes: 0,\n        maxConsumptionBytes: keyLengthBytes,\n        isActive: true,\n        createdAt: new Date()\n      };\n\n      this.keyStore.set(keyId, storedKey);\n      console.log(`Stored key ${keyId} with material length: ${quantumKeyMaterial.length}`);\n\n      // Persist the key to storage\n      await storage.createQuantumKey({\n        keyId,\n        keyMaterial: quantumKeyMaterial,\n        keyLength: keyLengthBytes,\n        expiryTime: new Date(Date.now() + this.KEY_EXPIRY_MS),\n        consumedBytes: 0,\n        maxConsumptionBytes: keyLengthBytes,\n        isActive: true,\n        createdAt: new Date()\n      });\n\n      // Log the key request\n      await storage.createKeyRequest({\n        requestId: request.request_id,\n        keyLength: keyLengthBytes,\n        recipient: request.recipient,\n        status: \"delivered\",\n        deliveryUri: `/kme/keys/${keyId}`\n      });\n\n      return {\n        key_id: keyId,\n        delivery_uri: `/kme/keys/${keyId}`,\n        status: \"delivered\"\n      };\n    } catch (error) {\n      console.error(\"KME request key error:\", error);\n      throw error;\n    }\n  }\n\n  async getKey(keyId: string): Promise<QuantumKeyMaterial | null> {\n    let key = this.keyPool.get(keyId);\n\n    // If key not in memory, try to load from storage\n    if (!key) {\n      try {\n        const storage = (await import('../storage')).storage;\n        const storedKey = await storage.getQuantumKey(keyId);\n\n        if (storedKey && storedKey.keyMaterial) {\n          key = {\n            key_id: storedKey.keyId,\n            key_material: storedKey.keyMaterial,\n            key_length_bits: storedKey.keyLength * 8,\n            expiry_time: Math.floor(storedKey.expiryTime.getTime() / 1000),\n            consumed_bytes: storedKey.consumedBytes || 0\n          };\n\n          // Add back to memory pool\n          this.keyPool.set(keyId, key);\n          console.log(`Loaded key from storage: ${keyId}`);\n        }\n      } catch (error) {\n        console.error(`Failed to load key from storage: ${keyId}`, error);\n      }\n    }\n\n    if (!key) {\n      console.error(`Key not found: ${keyId}`);\n      return null;\n    }\n\n    // Check if key is expired\n    const now = Math.floor(Date.now() / 1000);\n    if (key.expiry_time < now) {\n      console.error(`Key expired: ${keyId}`);\n      this.keyPool.delete(keyId);\n      await this.deleteKeyFromStorage(keyId);\n      return null;\n    }\n\n    return key;\n  }\n\n  async acknowledgeKeyUsage(keyId: string, ack: { consumed_bytes: number; message_id?: string }): Promise<boolean> {\n    try {\n      const key = this.keyPool.get(keyId);\n\n      if (!key) {\n        console.warn(`Attempted to acknowledge usage for unknown key: ${keyId}`);\n        // Try to find it in storage if it was loaded but not yet in pool\n        const storedKey = await this.getKey(keyId);\n        if (!storedKey) {\n          return false;\n        }\n        // If found, proceed with acknowledgment\n        return this.acknowledgeKeyUsage(keyId, ack);\n      }\n\n      const newConsumedBytes = (key.consumed_bytes || 0) + ack.consumed_bytes;\n\n      // Update consumed bytes in memory\n      key.consumed_bytes = newConsumedBytes;\n\n      // Persist updated key usage to storage\n      await storage.updateQuantumKeyUsage(keyId, newConsumedBytes);\n\n      // Keep key available for decryption even if consumed\n      // Only mark as inactive if it exceeds maximum usage significantly\n      if (newConsumedBytes >= key.key_length_bits * 1.5) { // Example: inactive if consumed 1.5x its own size\n        key.isActive = false;\n        await storage.deactivateQuantumKey(keyId);\n      }\n\n      console.log(`Key ${keyId} usage acknowledged: ${newConsumedBytes}/${key.key_length_bits} bytes consumed`);\n      return true;\n    } catch (error) {\n      console.error(\"KME acknowledge key usage error:\", error);\n      return false;\n    }\n  }\n\n  async getKeyPoolStats(): Promise<KeyPoolStats> {\n    try {\n      const activeKeys = Array.from(this.keyStore.values()).filter(key => key.isActive);\n      const totalKeys = activeKeys.length;\n\n      // Calculate total size used\n      const totalSizeBytes = activeKeys.reduce((sum, key) => sum + (key.keyMaterial ? key.keyMaterial.length * 3 / 4 : 0), 0); // Approximate size from base64\n      const totalSizeMB = totalSizeBytes / (1024 * 1024);\n      const remainingMB = Math.max(0, this.POOL_SIZE_MB - totalSizeMB);\n\n      this.keyPoolStats = {\n        availableKeys: totalKeys,\n        totalMB: this.POOL_SIZE_MB,\n        remainingMB: Math.round(remainingMB * 100) / 100,\n        utilizationPercent: Math.round((totalSizeMB / this.POOL_SIZE_MB) * 100)\n      };\n      return this.keyPoolStats;\n    } catch (error) {\n      console.error(\"Get key pool stats error:\", error);\n      return {\n        availableKeys: 0,\n        totalMB: this.POOL_SIZE_MB,\n        remainingMB: this.POOL_SIZE_MB,\n        utilizationPercent: 0\n      };\n    }\n  }\n\n  async maintainKeyPool(): Promise<void> {\n    try {\n      // Clean up expired keys from memory and storage\n      const now = new Date();\n      for (const [keyId, key] of this.keyStore.entries()) {\n        if (key.expiryTime < now) {\n          this.keyPool.delete(keyId);\n          this.keyStore.delete(keyId);\n          await this.deleteKeyFromStorage(keyId);\n        }\n      }\n\n      // Ensure pool size is maintained\n      const currentSize = this.keyPool.size;\n      if (currentSize < this.POOL_SIZE_TARGET) {\n        const keysToAdd = this.POOL_SIZE_TARGET - currentSize;\n        for (let i = 0; i < keysToAdd; i++) {\n          await this.generateAndStoreQuantumKey();\n        }\n      }\n      this.updateKeyPoolStats();\n    } catch (error) {\n      console.error(\"Key pool maintenance error:\", error);\n    }\n  }\n\n  private async generateAndStoreQuantumKey(): Promise<void> {\n    const keyLengthBits = this.DEFAULT_KEY_LENGTH;\n    const keyLengthBytes = Math.ceil(keyLengthBits / 8);\n    const quantumKeyMaterial = this.generateQuantumKey(keyLengthBits);\n    const keyId = `maintenance-${Date.now()}-${crypto.randomBytes(4).toString('hex')}`;\n\n    const storedKey: QuantumKeyEntry = {\n      keyId,\n      keyMaterial: quantumKeyMaterial,\n      keyLength: keyLengthBytes,\n      expiryTime: new Date(Date.now() + this.KEY_EXPIRY_MS),\n      consumedBytes: 0,\n      maxConsumptionBytes: keyLengthBytes,\n      isActive: true,\n      createdAt: new Date()\n    };\n\n    this.keyStore.set(keyId, storedKey);\n    \n    await storage.createQuantumKey({\n      keyId,\n      keyMaterial: quantumKeyMaterial,\n      keyLength: keyLengthBytes,\n      expiryTime: new Date(Date.now() + this.KEY_EXPIRY_MS),\n      consumedBytes: 0,\n      maxConsumptionBytes: keyLengthBytes,\n      isActive: true,\n      createdAt: new Date()\n    });\n  }\n\n  private async deleteKeyFromStorage(keyId: string): Promise<void> {\n    try {\n      const storage = (await import('../storage')).storage;\n      await storage.deleteQuantumKey(keyId);\n      console.log(`Deleted key ${keyId} from storage`);\n    } catch (error) {\n      console.error(`Failed to delete key ${keyId} from storage:`, error);\n    }\n  }\n\n  async updateQuantumKeyUsage(keyId: string, consumedBytes: number): Promise<void> {\n    try {\n      await storage.updateQuantumKey(keyId, { consumedBytes });\n    } catch (error) {\n      console.error(`Failed to update key usage: ${keyId}`, error);\n    }\n  }\n\n  async deactivateQuantumKey(keyId: string): Promise<void> {\n    try {\n      await storage.updateQuantumKey(keyId, { isActive: false });\n    } catch (error) {\n      console.error(`Failed to deactivate key: ${keyId}`, error);\n    }\n  }\n\n  private updateKeyPoolStats() {\n    const activeKeys = Array.from(this.keyStore.values()).filter(key => key.isActive);\n    const totalKeys = activeKeys.length;\n    const totalSizeBytes = activeKeys.reduce((sum, key) => sum + (key.keyMaterial ? key.keyMaterial.length * 3 / 4 : 0), 0); // Approximate size from base64\n    const totalSizeMB = totalSizeBytes / (1024 * 1024);\n    const remainingMB = Math.max(0, this.POOL_SIZE_MB - totalSizeMB);\n\n    this.keyPoolStats = {\n      availableKeys: totalKeys,\n      totalMB: this.POOL_SIZE_MB,\n      remainingMB: Math.round(remainingMB * 100) / 100,\n      utilizationPercent: Math.round((totalSizeMB / this.POOL_SIZE_MB) * 100)\n    };\n  }\n}\n\nexport const kmeSimulator = new KMESimulator();","size_bytes":12660},"client/src/components/compose-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport SecurityBadge from \"./security-badge\";\nimport { \n  Send, \n  Shield, \n  Paperclip, \n  Save, \n  X,\n  Upload,\n  AlertCircle\n} from \"lucide-react\";\nimport { SecurityLevel, type SendEmailRequest } from \"@/lib/types\";\n\ninterface ComposeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface AttachmentFile {\n  file: File;\n  id: string;\n}\n\nexport default function ComposeModal({ isOpen, onClose }: ComposeModalProps) {\n  const { toast } = useToast();\n  const [to, setTo] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [securityLevel, setSecurityLevel] = useState<SecurityLevel>(SecurityLevel.LEVEL1_OTP);\n  const [attachments, setAttachments] = useState<AttachmentFile[]>([]);\n\n  const { data: keyPoolStats } = useQuery({\n    queryKey: [\"/api/keys/pool\"],\n    queryFn: () => api.getKeyPool(),\n    refetchInterval: 30000\n  });\n\n  const sendEmailMutation = useMutation({\n    mutationFn: (emailData: SendEmailRequest) => api.sendEmail(emailData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/emails\"] });\n      toast({\n        title: \"Email sent\",\n        description: \"Your secure message has been sent successfully.\",\n      });\n      handleClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send email\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleClose = () => {\n    setTo(\"\");\n    setSubject(\"\");\n    setBody(\"\");\n    setSecurityLevel(SecurityLevel.LEVEL1_OTP);\n    setAttachments([]);\n    onClose();\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files) return;\n\n    const newAttachments: AttachmentFile[] = [];\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      if (file.size > 10 * 1024 * 1024) { // 10MB limit\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is larger than 10MB limit.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      newAttachments.push({\n        file,\n        id: `${Date.now()}-${i}`\n      });\n    }\n    \n    setAttachments(prev => [...prev, ...newAttachments]);\n  };\n\n  const removeAttachment = (id: string) => {\n    setAttachments(prev => prev.filter(att => att.id !== id));\n  };\n\n  const handleSend = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!to || !subject || !body) {\n      toast({\n        title: \"Missing fields\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Convert attachments to base64\n    const attachmentData = await Promise.all(\n      attachments.map(async (att) => {\n        const buffer = await att.file.arrayBuffer();\n        const base64 = btoa(String.fromCharCode(...new Uint8Array(buffer)));\n        return {\n          filename: att.file.name,\n          content: base64,\n          contentType: att.file.type\n        };\n      })\n    );\n\n    const emailData: SendEmailRequest = {\n      to,\n      subject,\n      body,\n      securityLevel,\n      attachments: attachmentData.length > 0 ? attachmentData : undefined\n    };\n\n    sendEmailMutation.mutate(emailData);\n  };\n\n  const getSecurityLevelInfo = (level: SecurityLevel) => {\n    switch (level) {\n      case SecurityLevel.LEVEL1_OTP:\n        return {\n          name: \"Level 1 - Quantum OTP\",\n          description: \"One-Time Pad encryption using quantum keys (Highest Security)\",\n          warning: keyPoolStats && keyPoolStats.remainingMB < 10 ? \"Low key pool - may fallback to Level 2\" : null\n        };\n      case SecurityLevel.LEVEL2_AES:\n        return {\n          name: \"Level 2 - Quantum-seeded AES-GCM\",\n          description: \"AES-256-GCM with quantum-derived keys\",\n          warning: null\n        };\n      case SecurityLevel.LEVEL3_PQC:\n        return {\n          name: \"Level 3 - CRYSTALS-Kyber PQC\",\n          description: \"Post-Quantum Cryptography with CRYSTALS-Kyber KEM\",\n          warning: null\n        };\n      case SecurityLevel.LEVEL4_PLAIN:\n        return {\n          name: \"Level 4 - Plain Text\",\n          description: \"No encryption (not recommended)\",\n          warning: \"This option provides no security protection\"\n        };\n    }\n  };\n\n  const securityInfo = getSecurityLevelInfo(securityLevel);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden flex flex-col\">\n        <DialogHeader className=\"flex-shrink-0\">\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Shield className=\"h-5 w-5\" />\n            <span>Compose Secure Email</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSend} className=\"flex flex-col flex-1 overflow-hidden\">\n          <div className=\"flex-1 overflow-y-auto px-6 pb-6 space-y-4\">\n            {/* Recipients */}\n            <div className=\"grid grid-cols-12 gap-4\">\n              <Label htmlFor=\"modal-to\" className=\"col-span-1 text-sm font-medium pt-2\">\n                To:\n              </Label>\n              <Input\n                id=\"modal-to\"\n                type=\"email\"\n                value={to}\n                onChange={(e) => setTo(e.target.value)}\n                placeholder=\"recipient@example.com\"\n                className=\"col-span-11\"\n                required\n                data-testid=\"modal-input-to\"\n              />\n            </div>\n\n            {/* Subject */}\n            <div className=\"grid grid-cols-12 gap-4\">\n              <Label htmlFor=\"modal-subject\" className=\"col-span-1 text-sm font-medium pt-2\">\n                Subject:\n              </Label>\n              <Input\n                id=\"modal-subject\"\n                type=\"text\"\n                value={subject}\n                onChange={(e) => setSubject(e.target.value)}\n                placeholder=\"Email subject...\"\n                className=\"col-span-11\"\n                required\n                data-testid=\"modal-input-subject\"\n              />\n            </div>\n\n            {/* Security Level */}\n            <div className=\"grid grid-cols-12 gap-4\">\n              <Label className=\"col-span-1 text-sm font-medium pt-2\">\n                Security:\n              </Label>\n              <div className=\"col-span-11 space-y-2\">\n                <Select \n                  value={securityLevel} \n                  onValueChange={(value: SecurityLevel) => setSecurityLevel(value)}\n                >\n                  <SelectTrigger data-testid=\"modal-select-security\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value={SecurityLevel.LEVEL1_OTP}>Level 1 - Quantum OTP (Highest Security)</SelectItem>\n                    <SelectItem value={SecurityLevel.LEVEL2_AES}>Level 2 - Quantum-seeded AES-GCM</SelectItem>\n                    <SelectItem value={SecurityLevel.LEVEL3_PQC}>Level 3 - CRYSTALS-Kyber PQC</SelectItem>\n                    <SelectItem value={SecurityLevel.LEVEL4_PLAIN}>Level 4 - Plain Text</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <div className=\"text-xs text-muted-foreground\">\n                  {securityInfo.description}\n                </div>\n                \n                {securityInfo.warning && (\n                  <div className=\"flex items-center space-x-2 p-2 bg-amber-50 dark:bg-amber-950 border border-amber-200 dark:border-amber-800 rounded-md\">\n                    <AlertCircle className=\"h-4 w-4 text-amber-600\" />\n                    <span className=\"text-xs text-amber-700 dark:text-amber-300\">\n                      {securityInfo.warning}\n                    </span>\n                  </div>\n                )}\n\n                {keyPoolStats && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Current key pool: {keyPoolStats.remainingMB} MB available\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Message Body */}\n            <div className=\"grid grid-cols-12 gap-4\">\n              <Label htmlFor=\"modal-body\" className=\"col-span-1 text-sm font-medium pt-2\">\n                Message:\n              </Label>\n              <Textarea\n                id=\"modal-body\"\n                value={body}\n                onChange={(e) => setBody(e.target.value)}\n                placeholder=\"Compose your secure message...\"\n                className=\"col-span-11 min-h-[150px] resize-none\"\n                required\n                data-testid=\"modal-textarea-body\"\n              />\n            </div>\n\n            {/* Attachments */}\n            <div className=\"grid grid-cols-12 gap-4\">\n              <Label className=\"col-span-1 text-sm font-medium pt-2\">\n                Attachments:\n              </Label>\n              <div className=\"col-span-11 space-y-4\">\n                <div className=\"relative border-2 border-dashed border-border rounded-lg p-4 text-center hover:bg-muted/50 transition-colors\">\n                  <div className=\"space-y-2 pointer-events-none\">\n                    <Upload className=\"h-6 w-6 text-muted-foreground mx-auto\" />\n                    <p className=\"text-sm text-muted-foreground\">Drag files here or click to browse</p>\n                    <p className=\"text-xs text-muted-foreground\">Max file size: 10MB</p>\n                  </div>\n                  <input\n                    type=\"file\"\n                    multiple\n                    onChange={handleFileUpload}\n                    className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10\"\n                    data-testid=\"modal-input-file\"\n                    style={{ pointerEvents: 'all' }}\n                  />\n                </div>\n\n                {/* Attachment List */}\n                {attachments.length > 0 && (\n                  <div className=\"space-y-2\">\n                    {attachments.map((attachment) => (\n                      <div\n                        key={attachment.id}\n                        className=\"flex items-center justify-between p-2 bg-muted rounded-md\"\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-6 h-6 bg-primary/10 rounded flex items-center justify-center\">\n                            <Paperclip className=\"h-3 w-3 text-primary\" />\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium\">{attachment.file.name}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {(attachment.file.size / 1024).toFixed(1)} KB\n                            </p>\n                          </div>\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeAttachment(attachment.id)}\n                          data-testid={`modal-button-remove-${attachment.id}`}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex-shrink-0 flex items-center justify-between p-6 border-t border-border bg-muted/30\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => document.querySelector<HTMLInputElement>('[data-testid=\"modal-input-file\"]')?.click()}\n              >\n                <Paperclip className=\"h-4 w-4 mr-1\" />\n                Attach Files\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"ghost\" \n                size=\"sm\"\n                data-testid=\"modal-button-save-draft\"\n              >\n                <Save className=\"h-4 w-4 mr-1\" />\n                Save Draft\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <SecurityBadge level={securityLevel} size=\"sm\" />\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                data-testid=\"modal-button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={sendEmailMutation.isPending}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"modal-button-send\"\n              >\n                <Shield className=\"h-4 w-4\" />\n                <span>\n                  {sendEmailMutation.isPending ? \"Sending...\" : \"Send Securely\"}\n                </span>\n              </Button>\n            </div>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13953},"client/src/components/email-list.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport SecurityBadge from \"./security-badge\";\nimport { Paperclip, CheckCircle, Lock, AlertCircle } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Message } from \"@/lib/types\";\n\ninterface EmailListProps {\n  folder?: string;\n  selectedMessageId?: string;\n  onSelectMessage: (message: Message) => void;\n}\n\nexport default function EmailList({ \n  folder = \"inbox\", \n  selectedMessageId, \n  onSelectMessage \n}: EmailListProps) {\n  const { data: messages, isLoading, error } = useQuery({\n    queryKey: [\"/api/emails\", folder],\n    queryFn: () => api.getEmails(folder),\n    refetchInterval: 30000 // Refresh every 30 seconds\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 space-y-4\">\n        {Array.from({ length: 5 }).map((_, i) => (\n          <Card key={i} className=\"p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <Skeleton className=\"w-10 h-10 rounded-full\" />\n              <div className=\"flex-1 space-y-2\">\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-1/2\" />\n                <Skeleton className=\"h-3 w-full\" />\n              </div>\n            </div>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-8 text-center\">\n        <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-medium text-foreground mb-2\">Failed to load emails</h3>\n        <p className=\"text-sm text-muted-foreground\">Please try again later.</p>\n      </div>\n    );\n  }\n\n  if (!messages || messages.length === 0) {\n    return (\n      <div className=\"p-8 text-center\">\n        <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n          <svg\n            className=\"w-8 h-8 text-muted-foreground\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M3 8l7.89 7.89a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n            />\n          </svg>\n        </div>\n        <h3 className=\"text-lg font-medium text-foreground mb-2\">No messages</h3>\n        <p className=\"text-sm text-muted-foreground\">\n          {folder === \"inbox\" ? \"Your inbox is empty.\" : `No messages in ${folder}.`}\n        </p>\n      </div>\n    );\n  }\n\n  const getFromName = (email: string) => {\n    const match = email.match(/^(.+?)\\s*<.*>$/);\n    return match ? match[1].trim() : email.split('@')[0];\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  const getEncryptionStatus = (message: Message) => {\n    if (!message.isEncrypted) return null;\n    \n    if (message.isDecrypted) {\n      return {\n        icon: CheckCircle,\n        text: \"Decrypted\",\n        color: \"text-green-600\"\n      };\n    } else {\n      return {\n        icon: Lock,\n        text: \"Awaiting decryption\", \n        color: \"text-amber-600\"\n      };\n    }\n  };\n\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      {messages.map((message) => {\n        const fromName = getFromName(message.from);\n        const encryptionStatus = getEncryptionStatus(message);\n        const isSelected = selectedMessageId === message.id;\n        \n        return (\n          <div\n            key={message.id}\n            className={`border-b border-border p-4 cursor-pointer transition-colors hover:bg-muted ${\n              isSelected ? 'bg-blue-50 dark:bg-blue-950/50' : ''\n            }`}\n            onClick={() => onSelectMessage(message)}\n            data-testid={`email-item-${message.id}`}\n          >\n            <div className=\"flex items-start space-x-3\">\n              <Avatar className=\"w-10 h-10\">\n                <AvatarFallback className=\"bg-primary text-primary-foreground text-sm\">\n                  {getInitials(fromName)}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center justify-between mb-1\">\n                  <p className=\"text-sm font-semibold text-foreground truncate\" data-testid=\"text-sender\">\n                    {fromName}\n                  </p>\n                  <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                    <SecurityBadge level={message.securityLevel} size=\"sm\" />\n                    <span className=\"text-xs text-muted-foreground\" data-testid=\"text-time\">\n                      {formatDistanceToNow(new Date(message.receivedAt), { addSuffix: true })}\n                    </span>\n                  </div>\n                </div>\n                \n                <p className=\"text-sm text-foreground mb-1 truncate\" data-testid=\"text-subject\">\n                  {message.subject}\n                </p>\n                \n                <p className=\"text-sm text-muted-foreground mb-2 truncate\" data-testid=\"text-preview\">\n                  {message.isDecrypted ? \n                    (message.body ? message.body.substring(0, 100) + \"...\" : \"No preview available\") :\n                    message.isEncrypted ? \"Encrypted message - decrypt to view\" : \"No preview available\"\n                  }\n                </p>\n                \n                <div className=\"flex items-center space-x-3 text-xs\">\n                  {message.attachments && message.attachments.length > 0 && (\n                    <span className=\"inline-flex items-center text-muted-foreground\">\n                      <Paperclip className=\"mr-1 h-3 w-3\" />\n                      {message.attachments.length} attachment{message.attachments.length > 1 ? 's' : ''}\n                    </span>\n                  )}\n                  \n                  {encryptionStatus && (\n                    <span className={`inline-flex items-center ${encryptionStatus.color}`}>\n                      <encryptionStatus.icon className=\"mr-1 h-3 w-3\" />\n                      {encryptionStatus.text}\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":6593},"client/src/components/email-preview.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport SecurityBadge from \"./security-badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Reply,\n  ReplyAll,\n  Forward,\n  MoreVertical,\n  Shield,\n  Download,\n  Unlock,\n  CheckCircle\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { Message } from \"@/lib/types\";\n\ninterface EmailPreviewProps {\n  message: Message | null;\n}\n\nexport default function EmailPreview({ message }: EmailPreviewProps) {\n  const { toast } = useToast();\n\n  const decryptMutation = useMutation({\n    mutationFn: (messageId: string) => api.decryptEmail(messageId),\n    onSuccess: async (data, messageId) => {\n      // First invalidate all email queries\n      await queryClient.invalidateQueries({ queryKey: [\"/api/emails\"] });\n      \n      // Force refetch of current folder emails\n      const currentFolder = window.location.pathname === \"/sent\" ? \"sent\" : \"inbox\";\n      await queryClient.refetchQueries({ queryKey: [\"/api/emails\", currentFolder] });\n      \n      toast({\n        title: \"Email decrypted\",\n        description: \"The email has been successfully decrypted.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Decryption failed\",\n        description: error.message || \"Failed to decrypt the email.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  if (!message) {\n    return (\n      <div className=\"h-full flex items-center justify-center text-center p-8\">\n        <div>\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg\n              className=\"w-8 h-8 text-muted-foreground\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M3 8l7.89 7.89a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n              />\n            </svg>\n          </div>\n          <h3 className=\"text-lg font-medium text-foreground mb-2\">Select an email</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Choose an email from the list to view its contents.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const getFromName = (email: string) => {\n    const match = email.match(/^(.+?)\\s*<.*>$/);\n    return match ? match[1].trim() : email.split('@')[0];\n  };\n\n  const getFromEmail = (email: string) => {\n    const match = email.match(/<(.+)>/);\n    return match ? match[1] : email;\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  const getSecurityInfo = (message: Message) => {\n    if (!message.isEncrypted) return null;\n\n    switch (message.securityLevel) {\n      case \"level1\":\n        return {\n          title: \"Level 1 OTP Encrypted\",\n          details: [\n            \"Encryption: One-Time Pad (OTP) using quantum keys\",\n            `Key ID: ${message.keyId || 'Unknown'}`,\n            \"Authentication: HMAC-SHA256 verified ✓\"\n          ]\n        };\n      case \"level2\":\n        return {\n          title: \"Level 2 Quantum AES\",\n          details: [\n            \"Encryption: AES-256-GCM with quantum-seeded keys\",\n            `Key ID: ${message.keyId || 'Unknown'}`,\n            \"Authentication: GCM authenticated encryption\"\n          ]\n        };\n      case \"level3\":\n        return {\n          title: \"Level 3 PQC Hybrid\",\n          details: [\n            \"Encryption: Post-Quantum Cryptography hybrid\",\n            `Key ID: ${message.keyId || 'Unknown'}`,\n            \"Future-proof against quantum computers\"\n          ]\n        };\n      default:\n        return {\n          title: \"Encrypted\",\n          details: [\"Unknown encryption method\"]\n        };\n    }\n  };\n\n  const fromName = getFromName(message.from);\n  const fromEmail = getFromEmail(message.from);\n  const securityInfo = getSecurityInfo(message);\n  const canDecrypt = message.isEncrypted && !message.isDecrypted;\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Email Header */}\n      <div className=\"border-b border-border p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex items-start space-x-3\">\n            <Avatar className=\"w-12 h-12\">\n              <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                {getInitials(fromName)}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-1\" data-testid=\"text-subject\">\n                {message.subject}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                From: <span className=\"text-foreground\" data-testid=\"text-from\">{fromName} &lt;{fromEmail}&gt;</span>\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                To: <span className=\"text-foreground\" data-testid=\"text-to\">{message.to}</span>\n              </p>\n              <p className=\"text-xs text-muted-foreground mt-1\" data-testid=\"text-timestamp\">\n                {formatDistanceToNow(new Date(message.receivedAt), { addSuffix: true })}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <SecurityBadge level={message.securityLevel} />\n            <Button variant=\"ghost\" size=\"sm\">\n              <Reply className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\">\n              <MoreVertical className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Security Info */}\n        {securityInfo && (\n          <div className={`p-3 rounded-lg border ${\n            message.isDecrypted\n              ? 'bg-green-50 border-green-200 dark:bg-green-950 dark:border-green-800'\n              : 'bg-amber-50 border-amber-200 dark:bg-amber-950 dark:border-amber-800'\n          }`}>\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Shield className={`h-4 w-4 ${\n                message.isDecrypted ? 'text-green-600' : 'text-amber-600'\n              }`} />\n              <span className={`text-sm font-medium ${\n                message.isDecrypted ? 'text-green-800 dark:text-green-200' : 'text-amber-800 dark:text-amber-200'\n              }`}>\n                {message.isDecrypted ? 'Quantum Security Active' : 'Encrypted Message'}\n              </span>\n              {message.isDecrypted && (\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              )}\n            </div>\n            <div className={`text-xs space-y-1 ${\n              message.isDecrypted ? 'text-green-700 dark:text-green-300' : 'text-amber-700 dark:text-amber-300'\n            }`}>\n              {securityInfo.details.map((detail, index) => (\n                <p key={index}>{detail}</p>\n              ))}\n            </div>\n            {canDecrypt && (\n              <Button\n                size=\"sm\"\n                className=\"mt-2\"\n                onClick={() => decryptMutation.mutate(message.id)}\n                disabled={decryptMutation.isPending}\n                data-testid=\"button-decrypt\"\n              >\n                <Unlock className=\"h-3 w-3 mr-1\" />\n                {decryptMutation.isPending ? \"Decrypting...\" : \"Decrypt Now\"}\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Email Content */}\n      <div className=\"flex-1 p-6 overflow-y-auto\">\n        {message.isDecrypted && message.body ? (\n          <div className=\"prose max-w-none text-foreground\" data-testid=\"email-content\">\n            <div className=\"whitespace-pre-wrap\">\n              {message.body}\n            </div>\n          </div>\n        ) : message.isEncrypted ? (\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-amber-100 dark:bg-amber-900 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Shield className=\"h-8 w-8 text-amber-600\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">Message Encrypted</h3>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              This message is encrypted with quantum security. Decrypt it to view the contents.\n            </p>\n            {canDecrypt && (\n              <Button\n                onClick={() => decryptMutation.mutate(message.id)}\n                disabled={decryptMutation.isPending}\n                data-testid=\"button-decrypt-main\"\n              >\n                <Unlock className=\"h-4 w-4 mr-2\" />\n                {decryptMutation.isPending ? \"Decrypting...\" : \"Decrypt Message\"}\n              </Button>\n            )}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No content available</p>\n          </div>\n        )}\n\n        {/* Attachments */}\n        {message.attachments && message.attachments.length > 0 && (\n          <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n            <h4 className=\"text-sm font-medium text-foreground mb-3 flex items-center\">\n              <svg className=\"h-4 w-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13\" />\n              </svg>\n              Attachments ({message.attachments.length})\n            </h4>\n            <div className=\"space-y-2\">\n              {message.attachments.map((attachment, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-card border border-border rounded-md\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary/10 rounded flex items-center justify-center\">\n                      <svg className=\"h-4 w-4 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                      </svg>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-foreground\">{attachment.filename}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {(attachment.size / 1024).toFixed(1)} KB • {attachment.contentType}\n                      </p>\n                    </div>\n                  </div>\n                  <Button size=\"sm\" variant=\"outline\" data-testid={`button-download-${index}`}>\n                    <Download className=\"h-3 w-3 mr-1\" />\n                    Download\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Reply Actions */}\n      <div className=\"border-t border-border p-4 bg-card\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Button size=\"sm\" data-testid=\"button-reply\">\n              <Reply className=\"h-4 w-4 mr-2\" />\n              Reply\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" data-testid=\"button-reply-all\">\n              <ReplyAll className=\"h-4 w-4 mr-2\" />\n              Reply All\n            </Button>\n            <Button size=\"sm\" variant=\"outline\" data-testid=\"button-forward\">\n              <Forward className=\"h-4 w-4 mr-2\" />\n              Forward\n            </Button>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <select className=\"px-3 py-1 text-sm bg-background border border-border rounded-md focus:outline-none focus:ring-2 focus:ring-ring\">\n              <option value=\"level1\">Level 1 - Quantum OTP</option>\n              <option value=\"level2\">Level 2 - Quantum AES</option>\n              <option value=\"level3\">Level 3 - PQC Hybrid</option>\n              <option value=\"level4\">Level 4 - Plain Text</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12700},"client/src/components/security-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Shield, Key, Lock, Mail } from \"lucide-react\";\nimport { SecurityLevel } from \"@/lib/types\";\n\ninterface SecurityBadgeProps {\n  level: SecurityLevel;\n  size?: \"sm\" | \"md\" | \"lg\";\n  showIcon?: boolean;\n}\n\nexport default function SecurityBadge({ level, size = \"md\", showIcon = true }: SecurityBadgeProps) {\n  const getSecurityConfig = (level: SecurityLevel) => {\n    switch (level) {\n      case SecurityLevel.LEVEL1_OTP:\n        return {\n          label: \"Level 1 OTP\",\n          description: \"One-Time Pad\",\n          color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n          icon: Shield\n        };\n      case SecurityLevel.LEVEL2_AES:\n        return {\n          label: \"Level 2 AES\", \n          description: \"Quantum-seeded AES\",\n          color: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\",\n          icon: Key\n        };\n      case SecurityLevel.LEVEL3_PQC:\n        return {\n          label: \"Level 3 PQC\",\n          description: \"CRYSTALS-Kyber PQC\",\n          color: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\",\n          icon: Lock\n        };\n      case SecurityLevel.LEVEL4_PLAIN:\n        return {\n          label: \"Plain Text\",\n          description: \"No encryption\",\n          color: \"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200\",\n          icon: Mail\n        };\n      default:\n        return {\n          label: \"Unknown\",\n          description: \"Unknown security level\",\n          color: \"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200\",\n          icon: Mail\n        };\n    }\n  };\n\n  const config = getSecurityConfig(level);\n  const Icon = config.icon;\n\n  const sizeClasses = {\n    sm: \"text-xs px-2 py-0.5\",\n    md: \"text-sm px-2 py-1\", \n    lg: \"text-base px-3 py-1.5\"\n  };\n\n  const iconSizes = {\n    sm: \"h-3 w-3\",\n    md: \"h-4 w-4\",\n    lg: \"h-5 w-5\"\n  };\n\n  return (\n    <Badge \n      className={`${config.color} ${sizeClasses[size]} inline-flex items-center space-x-1 border-0`}\n      data-testid={`badge-security-${level}`}\n    >\n      {showIcon && <Icon className={iconSizes[size]} />}\n      <span>{config.label}</span>\n    </Badge>\n  );\n}\n","size_bytes":2221},"client/src/components/sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Shield, \n  Inbox, \n  Send, \n  Key, \n  Trash, \n  Settings, \n  ShieldCheck,\n  LogOut\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  unreadCount?: number;\n}\n\nexport default function Sidebar({ unreadCount = 0 }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: userInfo } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => api.getMe()\n  });\n\n  const { data: keyPoolStats } = useQuery({\n    queryKey: [\"/api/keys/pool\"],\n    queryFn: () => api.getKeyPool(),\n    refetchInterval: 30000 // Refresh every 30 seconds\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => api.logout(),\n    onSuccess: () => {\n      // Clear all queries and reset query client\n      queryClient.clear();\n      queryClient.resetQueries();\n      // Force redirect to login\n      window.location.href = \"/login\";\n    },\n    onError: () => {\n      // Even if logout fails on server, clear client state\n      queryClient.clear();\n      queryClient.resetQueries();\n      window.location.href = \"/login\";\n    }\n  });\n\n  const navItems = [\n    { \n      path: \"/inbox\", \n      icon: Inbox, \n      label: \"Inbox\", \n      badge: unreadCount > 0 ? unreadCount.toString() : undefined \n    },\n    { path: \"/sent\", icon: Send, label: \"Sent\" },\n    { path: \"/compose\", icon: Send, label: \"Compose\" },\n    { path: \"/keys\", icon: Key, label: \"Key Dashboard\" },\n    { path: \"/settings\", icon: Settings, label: \"Settings\" },\n  ];\n\n  const getSecurityStatus = () => {\n    if (!keyPoolStats) return { level: \"Unknown\", color: \"bg-gray-500\" };\n\n    if (keyPoolStats.utilizationPercent < 50) {\n      return { level: \"Quantum Active\", color: \"bg-green-500\" };\n    } else if (keyPoolStats.utilizationPercent < 80) {\n      return { level: \"Quantum Low\", color: \"bg-yellow-500\" };\n    } else {\n      return { level: \"Quantum Critical\", color: \"bg-red-500\" };\n    }\n  };\n\n  const securityStatus = getSecurityStatus();\n\n  if (!userInfo?.user) {\n    return null;\n  }\n\n  const user = userInfo.user;\n\n  return (\n    <div className=\"w-64 bg-card border-r border-border flex flex-col h-screen\">\n      {/* Logo and Title */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Shield className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-foreground\">QuMail</h1>\n            <p className=\"text-xs text-muted-foreground\">Quantum Secure Email</p>\n          </div>\n        </div>\n      </div>\n\n      {/* User Info */}\n      <div className=\"p-4 border-b border-border\">\n        <div className=\"flex items-center space-x-3 mb-3\">\n          <Avatar>\n            <AvatarFallback className=\"bg-primary text-primary-foreground\">\n              {user.username?.charAt(0).toUpperCase() || user.email.charAt(0).toUpperCase()}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-foreground truncate\" data-testid=\"text-username\">\n              {user.username || user.email.split('@')[0]}\n            </p>\n            <p className=\"text-xs text-muted-foreground truncate\" data-testid=\"text-email\">\n              {user.email}\n            </p>\n          </div>\n        </div>\n\n        {/* Security Status */}\n        <div className=\"p-2 bg-green-50 dark:bg-green-950 rounded-md border border-green-200 dark:border-green-800\">\n          <div className=\"flex items-center justify-between mb-1\">\n            <span className=\"text-xs font-medium text-green-800 dark:text-green-200\">\n              Security Status\n            </span>\n            <span className=\"text-xs text-green-600 dark:text-green-400\" data-testid=\"text-security-status\">\n              {securityStatus.level}\n            </span>\n          </div>\n          <div className=\"w-full bg-green-200 dark:bg-green-900 rounded-full h-1.5\">\n            <div \n              className={`${securityStatus.color} h-1.5 rounded-full transition-all`}\n              style={{ width: `${100 - (keyPoolStats?.utilizationPercent || 0)}%` }}\n            ></div>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.path;\n\n          return (\n            <Button\n              key={item.path}\n              variant={isActive ? \"default\" : \"ghost\"}\n              className={`w-full justify-start ${isActive ? 'bg-primary text-primary-foreground' : 'text-muted-foreground hover:bg-muted hover:text-foreground'}`}\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                setLocation(item.path);\n              }}\n              data-testid={`nav-${item.label.toLowerCase().replace(' ', '-')}`}\n            >\n              <Icon className=\"h-4 w-4 mr-3\" />\n              <span className=\"text-sm font-medium\">{item.label}</span>\n              {item.badge && (\n                <Badge \n                  variant={isActive ? \"secondary\" : \"default\"} \n                  className=\"ml-auto\"\n                  data-testid=\"badge-unread-count\"\n                >\n                  {item.badge}\n                </Badge>\n              )}\n            </Button>\n          );\n        })}\n\n        <div className=\"pt-4\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start text-muted-foreground hover:bg-muted hover:text-foreground\"\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              setLocation(\"/audit\");\n            }}\n            data-testid=\"nav-security-audit\"\n          >\n            <ShieldCheck className=\"h-4 w-4 mr-3\" />\n            <span className=\"text-sm font-medium\">Security Audit</span>\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"w-full justify-start text-destructive hover:text-destructive\"\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              logoutMutation.mutate();\n            }}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"h-4 w-4 mr-3\" />\n            <span className=\"text-sm font-medium\">\n              {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n            </span>\n          </Button>\n        </div>\n      </nav>\n\n      {/* Key Usage Status */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"bg-muted rounded-lg p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-xs font-medium text-muted-foreground\">Quantum Keys</span>\n            <span className=\"text-xs text-foreground\" data-testid=\"text-key-capacity\">\n              {keyPoolStats ? `${keyPoolStats.remainingMB} MB` : \"Loading...\"}\n            </span>\n          </div>\n          <Progress \n            value={keyPoolStats ? 100 - keyPoolStats.utilizationPercent : 0} \n            className=\"h-2\"\n            data-testid=\"progress-key-usage\"\n          />\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            {keyPoolStats ? `${100 - keyPoolStats.utilizationPercent}% capacity remaining` : \"Loading...\"}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7986},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { User, Message, QuantumKey, KeyPoolStats, AuditLog, SendEmailRequest } from \"./types\";\n\nexport const api = {\n  // Authentication\n  async register(userData: { username: string; email: string; password: string }) {\n    const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n    return response.json();\n  },\n\n  async login(credentials: { email: string; password: string }) {\n    const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n    return response.json();\n  },\n\n  async logout() {\n    const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n    return response.json();\n  },\n\n  async getMe(): Promise<{ user: User }> {\n    const response = await apiRequest(\"GET\", \"/api/auth/me\");\n    return response.json();\n  },\n\n  // Email operations\n  async getEmails(folder = \"inbox\"): Promise<Message[]> {\n    const response = await apiRequest(\"GET\", `/api/emails?folder=${folder}`);\n    return response.json();\n  },\n\n  async getEmail(messageId: string): Promise<Message> {\n    const response = await apiRequest(\"GET\", `/api/emails/${messageId}`);\n    return response.json();\n  },\n\n  async sendEmail(emailData: SendEmailRequest) {\n    const response = await apiRequest(\"POST\", \"/api/emails/send\", emailData);\n    return response.json();\n  },\n\n  async decryptEmail(messageId: string) {\n    const response = await apiRequest(\"POST\", `/api/emails/${messageId}/decrypt`);\n    return response.json();\n  },\n\n  async fetchEmails() {\n    const response = await apiRequest(\"POST\", \"/api/emails/fetch\");\n    return response.json();\n  },\n\n  // Key management\n  async getKeyPool(): Promise<KeyPoolStats> {\n    const response = await apiRequest(\"GET\", \"/api/keys/pool\");\n    return response.json();\n  },\n\n  async getKeys(): Promise<QuantumKey[]> {\n    const response = await apiRequest(\"GET\", \"/api/keys\");\n    return response.json();\n  },\n\n  async requestKey(keyLength = 8192, recipient?: string) {\n    const response = await apiRequest(\"POST\", \"/api/keys/request\", { keyLength, recipient });\n    return response.json();\n  },\n\n  // Audit logs\n  async getAuditLogs(limit = 50): Promise<AuditLog[]> {\n    const response = await apiRequest(\"GET\", `/api/audit?limit=${limit}`);\n    return response.json();\n  },\n\n  // User settings\n  async updateSettings(settings: Record<string, any>) {\n    const response = await apiRequest(\"PUT\", \"/api/user/settings\", settings);\n    return response.json();\n  }\n};","size_bytes":2478},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface User {\n  id: string;\n  email: string;\n  username: string;\n  emailProvider?: string;\n  defaultSecurityLevel?: string;\n}\n\nexport interface Message {\n  id: string;\n  userId: string;\n  messageId: string;\n  from: string;\n  to: string;\n  subject: string;\n  body?: string;\n  encryptedBody?: string;\n  securityLevel: SecurityLevel;\n  keyId?: string;\n  isEncrypted: boolean;\n  isDecrypted: boolean;\n  attachments?: Array<{\n    filename: string;\n    contentType: string;\n    size: number;\n  }>;\n  encryptedAttachments?: Array<{\n    filename: string;\n    originalSize: number;\n    contentType: string;\n    encryptedData: string;\n    keyId?: string;\n  }>;\n  receivedAt: string;\n  folder: string;\n}\n\nexport interface EmailAttachment {\n  filename: string;\n  contentType: string;\n  size: number;\n}\n\nexport interface QuantumKey {\n  id: string;\n  keyId: string;\n  keyLength: number;\n  consumedBytes: number;\n  maxConsumptionBytes: number;\n  utilizationPercent: number;\n  expiryTime: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport interface KeyPoolStats {\n  totalKeys: number;\n  totalCapacityMB: number;\n  consumedMB: number;\n  remainingMB: number;\n  utilizationPercent: number;\n}\n\nexport interface AuditLog {\n  id: string;\n  userId?: string;\n  action: string;\n  details: Record<string, any>;\n  ipAddress?: string;\n  userAgent?: string;\n  timestamp: string;\n}\n\nexport enum SecurityLevel {\n  LEVEL1_OTP = \"level1\",\n  LEVEL2_AES = \"level2\",\n  LEVEL3_PQC = \"level3\", \n  LEVEL4_PLAIN = \"level4\"\n}\n\nexport interface SendEmailRequest {\n  to: string;\n  subject: string;\n  body: string;\n  securityLevel: SecurityLevel;\n  attachments?: {\n    filename: string;\n    content: string; // base64\n    contentType: string;\n  }[];\n}","size_bytes":1727},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/compose.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport SecurityBadge from \"@/components/security-badge\";\nimport { \n  Send, \n  Shield, \n  Paperclip, \n  Save, \n  ArrowLeft,\n  Upload,\n  X,\n  AlertCircle\n} from \"lucide-react\";\nimport { SecurityLevel, type SendEmailRequest } from \"@/lib/types\";\n\ninterface AttachmentFile {\n  file: File;\n  id: string;\n}\n\nexport default function Compose() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [to, setTo] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [securityLevel, setSecurityLevel] = useState<SecurityLevel>(SecurityLevel.LEVEL1_OTP);\n  const [attachments, setAttachments] = useState<AttachmentFile[]>([]);\n\n  const { data: userInfo } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => api.getMe()\n  });\n\n  const { data: keyPoolStats } = useQuery({\n    queryKey: [\"/api/keys/pool\"],\n    queryFn: () => api.getKeyPool(),\n    refetchInterval: 30000\n  });\n\n  const sendEmailMutation = useMutation({\n    mutationFn: (emailData: SendEmailRequest) => api.sendEmail(emailData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/emails\"] });\n      toast({\n        title: \"Email sent\",\n        description: \"Your secure message has been sent successfully.\",\n      });\n      setLocation(\"/inbox\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send email\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files) return;\n\n    const newAttachments: AttachmentFile[] = [];\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      if (file.size > 10 * 1024 * 1024) { // 10MB limit\n        toast({\n          title: \"File too large\",\n          description: `${file.name} is larger than 10MB limit.`,\n          variant: \"destructive\",\n        });\n        continue;\n      }\n      newAttachments.push({\n        file,\n        id: `${Date.now()}-${i}`\n      });\n    }\n    \n    setAttachments(prev => [...prev, ...newAttachments]);\n  };\n\n  const removeAttachment = (id: string) => {\n    setAttachments(prev => prev.filter(att => att.id !== id));\n  };\n\n  const handleSend = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!to || !subject || !body) {\n      toast({\n        title: \"Missing fields\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Convert attachments to base64\n    const attachmentData = await Promise.all(\n      attachments.map(async (att) => {\n        const buffer = await att.file.arrayBuffer();\n        const base64 = btoa(String.fromCharCode(...new Uint8Array(buffer)));\n        return {\n          filename: att.file.name,\n          content: base64,\n          contentType: att.file.type\n        };\n      })\n    );\n\n    const emailData: SendEmailRequest = {\n      to,\n      subject,\n      body,\n      securityLevel,\n      attachments: attachmentData.length > 0 ? attachmentData : undefined\n    };\n\n    sendEmailMutation.mutate(emailData);\n  };\n\n  const getSecurityLevelInfo = (level: SecurityLevel) => {\n    switch (level) {\n      case SecurityLevel.LEVEL1_OTP:\n        return {\n          name: \"Level 1 - Quantum OTP\",\n          description: \"One-Time Pad encryption using quantum keys (Highest Security)\",\n          warning: keyPoolStats && keyPoolStats.remainingMB < 10 ? \"Low key pool - may fallback to Level 2\" : null\n        };\n      case SecurityLevel.LEVEL2_AES:\n        return {\n          name: \"Level 2 - Quantum-seeded AES-GCM\",\n          description: \"AES-256-GCM with quantum-derived keys\",\n          warning: null\n        };\n      case SecurityLevel.LEVEL3_PQC:\n        return {\n          name: \"Level 3 - CRYSTALS-Kyber PQC\",\n          description: \"Post-Quantum Cryptography with CRYSTALS-Kyber KEM\",\n          warning: null\n        };\n      case SecurityLevel.LEVEL4_PLAIN:\n        return {\n          name: \"Level 4 - Plain Text\",\n          description: \"No encryption (not recommended)\",\n          warning: \"This option provides no security protection\"\n        };\n    }\n  };\n\n  const securityInfo = getSecurityLevelInfo(securityLevel);\n\n  if (!userInfo?.user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/inbox\")}\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Inbox\n              </Button>\n              <div>\n                <h2 className=\"text-2xl font-semibold text-foreground\">Compose Secure Email</h2>\n                <p className=\"text-sm text-muted-foreground\">Send encrypted messages with quantum security</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <SecurityBadge level={securityLevel} />\n              {keyPoolStats && (\n                <div className=\"text-xs text-muted-foreground\">\n                  Key pool: {keyPoolStats.remainingMB} MB available\n                </div>\n              )}\n            </div>\n          </div>\n        </header>\n\n        {/* Compose Form */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <Card className=\"max-w-4xl mx-auto\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Shield className=\"h-5 w-5\" />\n                <span>New Message</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSend} className=\"space-y-6\">\n                {/* Recipients */}\n                <div className=\"grid grid-cols-12 gap-4\">\n                  <Label htmlFor=\"to\" className=\"col-span-1 text-sm font-medium pt-2\">\n                    To:\n                  </Label>\n                  <Input\n                    id=\"to\"\n                    type=\"email\"\n                    value={to}\n                    onChange={(e) => setTo(e.target.value)}\n                    placeholder=\"recipient@example.com\"\n                    className=\"col-span-11\"\n                    required\n                    data-testid=\"input-to\"\n                  />\n                </div>\n\n                {/* Subject */}\n                <div className=\"grid grid-cols-12 gap-4\">\n                  <Label htmlFor=\"subject\" className=\"col-span-1 text-sm font-medium pt-2\">\n                    Subject:\n                  </Label>\n                  <Input\n                    id=\"subject\"\n                    type=\"text\"\n                    value={subject}\n                    onChange={(e) => setSubject(e.target.value)}\n                    placeholder=\"Email subject...\"\n                    className=\"col-span-11\"\n                    required\n                    data-testid=\"input-subject\"\n                  />\n                </div>\n\n                {/* Security Level */}\n                <div className=\"grid grid-cols-12 gap-4\">\n                  <Label className=\"col-span-1 text-sm font-medium pt-2\">\n                    Security:\n                  </Label>\n                  <div className=\"col-span-11 space-y-2\">\n                    <Select \n                      value={securityLevel} \n                      onValueChange={(value: SecurityLevel) => setSecurityLevel(value)}\n                    >\n                      <SelectTrigger data-testid=\"select-security-level\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value={SecurityLevel.LEVEL1_OTP}>Level 1 - Quantum OTP (Highest Security)</SelectItem>\n                        <SelectItem value={SecurityLevel.LEVEL2_AES}>Level 2 - Quantum-seeded AES-GCM</SelectItem>\n                        <SelectItem value={SecurityLevel.LEVEL3_PQC}>Level 3 - CRYSTALS-Kyber PQC</SelectItem>\n                        <SelectItem value={SecurityLevel.LEVEL4_PLAIN}>Level 4 - Plain Text</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    \n                    <div className=\"text-xs text-muted-foreground\">\n                      {securityInfo.description}\n                    </div>\n                    \n                    {securityInfo.warning && (\n                      <div className=\"flex items-center space-x-2 p-2 bg-amber-50 dark:bg-amber-950 border border-amber-200 dark:border-amber-800 rounded-md\">\n                        <AlertCircle className=\"h-4 w-4 text-amber-600\" />\n                        <span className=\"text-xs text-amber-700 dark:text-amber-300\">\n                          {securityInfo.warning}\n                        </span>\n                      </div>\n                    )}\n\n                    {keyPoolStats && securityLevel === SecurityLevel.LEVEL1_OTP && (\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-xs text-muted-foreground\">\n                          <span>Available quantum keys:</span>\n                          <span>{keyPoolStats.remainingMB} MB</span>\n                        </div>\n                        <Progress \n                          value={100 - keyPoolStats.utilizationPercent} \n                          className=\"h-1\"\n                        />\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Message Body */}\n                <div className=\"grid grid-cols-12 gap-4\">\n                  <Label htmlFor=\"body\" className=\"col-span-1 text-sm font-medium pt-2\">\n                    Message:\n                  </Label>\n                  <Textarea\n                    id=\"body\"\n                    value={body}\n                    onChange={(e) => setBody(e.target.value)}\n                    placeholder=\"Compose your secure message...\"\n                    className=\"col-span-11 min-h-[200px] resize-none\"\n                    required\n                    data-testid=\"textarea-body\"\n                  />\n                </div>\n\n                {/* Attachments */}\n                <div className=\"grid grid-cols-12 gap-4\">\n                  <Label className=\"col-span-1 text-sm font-medium pt-2\">\n                    Attachments:\n                  </Label>\n                  <div className=\"col-span-11 space-y-4\">\n                    <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center relative\">\n                      <div className=\"space-y-2\">\n                        <Upload className=\"h-8 w-8 text-muted-foreground mx-auto\" />\n                        <p className=\"text-sm text-muted-foreground\">Drag files here or click to browse</p>\n                        <p className=\"text-xs text-muted-foreground\">Max file size: 10MB</p>\n                      </div>\n                      <input\n                        type=\"file\"\n                        multiple\n                        onChange={handleFileUpload}\n                        className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10\"\n                        data-testid=\"input-file\"\n                        style={{ pointerEvents: 'all' }}\n                      />\n                    </div>\n\n                    {/* Attachment List */}\n                    {attachments.length > 0 && (\n                      <div className=\"space-y-2\">\n                        {attachments.map((attachment) => (\n                          <div\n                            key={attachment.id}\n                            className=\"flex items-center justify-between p-3 bg-muted rounded-md\"\n                          >\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 bg-primary/10 rounded flex items-center justify-center\">\n                                <Paperclip className=\"h-4 w-4 text-primary\" />\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium\">{attachment.file.name}</p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {(attachment.file.size / 1024).toFixed(1)} KB\n                                </p>\n                              </div>\n                            </div>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeAttachment(attachment.id)}\n                              data-testid={`button-remove-attachment-${attachment.id}`}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Actions */}\n                <div className=\"flex items-center justify-between pt-6 border-t border-border\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => document.querySelector<HTMLInputElement>('input[type=\"file\"]')?.click()}\n                    >\n                      <Paperclip className=\"h-4 w-4 mr-1\" />\n                      Attach Files\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid=\"button-save-draft\"\n                    >\n                      <Save className=\"h-4 w-4 mr-1\" />\n                      Save Draft\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setLocation(\"/inbox\")}\n                      data-testid=\"button-cancel\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={sendEmailMutation.isPending}\n                      className=\"flex items-center space-x-2\"\n                      data-testid=\"button-send\"\n                    >\n                      <Shield className=\"h-4 w-4\" />\n                      <span>\n                        {sendEmailMutation.isPending ? \"Sending...\" : \"Send Securely\"}\n                      </span>\n                    </Button>\n                  </div>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16499},"client/src/pages/inbox.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport EmailList from \"@/components/email-list\";\nimport EmailPreview from \"@/components/email-preview\";\nimport ComposeModal from \"@/components/compose-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Search, \n  Plus, \n  RefreshCw, \n  AlertCircle,\n  CheckCircle \n} from \"lucide-react\";\nimport type { Message } from \"@/lib/types\";\n\nexport default function Inbox() {\n  const { toast } = useToast();\n  const [selectedMessage, setSelectedMessage] = useState<Message | null>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isComposeOpen, setIsComposeOpen] = useState(false);\n  \n  // Get current folder from URL path\n  const [location] = useLocation();\n  const currentFolder = location === \"/sent\" ? \"sent\" : \"inbox\";\n\n  const { data: messages, isLoading, error, refetch } = useQuery({\n    queryKey: [\"/api/emails\", currentFolder],\n    queryFn: () => api.getEmails(currentFolder),\n    refetchInterval: 30000 // Auto-refresh every 30 seconds\n  });\n\n  // Update selected message when messages data changes\n  React.useEffect(() => {\n    if (selectedMessage && messages) {\n      const updatedMessage = messages.find(msg => msg.id === selectedMessage.id);\n      if (updatedMessage && updatedMessage.isDecrypted !== selectedMessage.isDecrypted) {\n        setSelectedMessage(updatedMessage);\n      }\n    }\n  }, [messages, selectedMessage]);\n\n  const { data: userInfo } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => api.getMe()\n  });\n\n  const fetchEmailsMutation = useMutation({\n    mutationFn: () => api.fetchEmails(),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/emails\"] });\n      toast({\n        title: \"Emails updated\",\n        description: \"Successfully fetched latest emails from your provider.\",\n        variant: \"default\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Sync failed\",\n        description: error.message || \"Failed to fetch emails from your provider.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSelectMessage = (message: Message) => {\n    setSelectedMessage(message);\n  };\n\n  const handleRefresh = () => {\n    fetchEmailsMutation.mutate();\n  };\n\n  const getUnreadCount = () => {\n    if (!messages) return 0;\n    return messages.filter(msg => !msg.isRead).length;\n  };\n\n  const getLastSyncTime = () => {\n    return \"2 minutes ago\"; // This would come from actual sync metadata\n  };\n\n  if (!userInfo?.user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      <Sidebar unreadCount={getUnreadCount()} />\n      \n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"flex items-center space-x-3\">\n                <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"page-title\">\n                  {currentFolder.charAt(0).toUpperCase() + currentFolder.slice(1)}\n                </h2>\n                {isLoading && (\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-primary\"></div>\n                )}\n                {error && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    <AlertCircle className=\"h-3 w-3 mr-1\" />\n                    Error\n                  </Badge>\n                )}\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {messages ? (\n                  <>\n                    {getUnreadCount()} unread messages • Last sync: {getLastSyncTime()}\n                  </>\n                ) : (\n                  \"Loading messages...\"\n                )}\n              </p>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Search */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search messages...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 w-64 text-sm\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n              \n              {/* Actions */}\n              <Button\n                onClick={() => setIsComposeOpen(true)}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-compose\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                <span>Compose</span>\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleRefresh}\n                disabled={fetchEmailsMutation.isPending}\n                data-testid=\"button-refresh\"\n              >\n                <RefreshCw className={`h-4 w-4 ${fetchEmailsMutation.isPending ? 'animate-spin' : ''}`} />\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <div className=\"flex-1 flex overflow-hidden\">\n          {/* Email List */}\n          <div className=\"w-1/2 border-r border-border\">\n            <EmailList\n              folder={currentFolder}\n              selectedMessageId={selectedMessage?.id}\n              onSelectMessage={handleSelectMessage}\n            />\n          </div>\n\n          {/* Email Preview */}\n          <div className=\"w-1/2\">\n            <EmailPreview message={selectedMessage} />\n          </div>\n        </div>\n      </div>\n\n      {/* Compose Modal */}\n      <ComposeModal\n        isOpen={isComposeOpen}\n        onClose={() => setIsComposeOpen(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":6698},"client/src/pages/key-dashboard.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  Key, \n  Shield, \n  Plus, \n  RefreshCw, \n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Database,\n  TrendingUp,\n  Activity\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { QuantumKey, KeyPoolStats } from \"@/lib/types\";\n\nexport default function KeyDashboard() {\n  const { toast } = useToast();\n\n  const { data: keyPoolStats, isLoading: statsLoading, isFetching: statsFetching } = useQuery({\n    queryKey: [\"/api/keys/pool\"],\n    queryFn: () => api.getKeyPool(),\n    refetchInterval: 2000 // Refresh every 2 seconds for live updates\n  });\n\n  const { data: keys, isLoading: keysLoading, isFetching: keysFetching } = useQuery({\n    queryKey: [\"/api/keys\"],\n    queryFn: () => api.getKeys(),\n    refetchInterval: 3000 // Refresh every 3 seconds for live updates\n  });\n\n  const { data: userInfo, isFetching: userFetching } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => api.getMe(),\n    refetchInterval: 5000 // Refresh every 5 seconds\n  });\n\n  const requestKeyMutation = useMutation({\n    mutationFn: ({ keyLength, recipient }: { keyLength: number; recipient?: string }) => \n      api.requestKey(keyLength, recipient),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/keys\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/keys/pool\"] });\n      toast({\n        title: \"Quantum key requested\",\n        description: \"A new quantum key has been generated and added to your pool.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Key request failed\",\n        description: error.message || \"Failed to request new quantum key.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleRequestKey = (keyLength: number = 8192) => {\n    requestKeyMutation.mutate({ keyLength });\n  };\n\n  const getKeyStatusColor = (key: QuantumKey) => {\n    if (!key.isActive) return \"bg-gray-100 text-gray-800\";\n    if (key.utilizationPercent >= 90) return \"bg-red-100 text-red-800\";\n    if (key.utilizationPercent >= 70) return \"bg-yellow-100 text-yellow-800\";\n    return \"bg-green-100 text-green-800\";\n  };\n\n  const getKeyStatusText = (key: QuantumKey) => {\n    if (!key.isActive) return \"Exhausted\";\n    if (key.utilizationPercent >= 90) return \"Critical\";\n    if (key.utilizationPercent >= 70) return \"Low\";\n    return \"Active\";\n  };\n\n  const getPoolHealthStatus = () => {\n    if (!keyPoolStats) return { status: \"Unknown\", color: \"text-gray-600\", icon: Clock };\n    \n    if (keyPoolStats.utilizationPercent <= 30) {\n      return { status: \"Excellent\", color: \"text-green-600\", icon: CheckCircle };\n    } else if (keyPoolStats.utilizationPercent <= 60) {\n      return { status: \"Good\", color: \"text-blue-600\", icon: TrendingUp };\n    } else if (keyPoolStats.utilizationPercent <= 80) {\n      return { status: \"Warning\", color: \"text-yellow-600\", icon: AlertTriangle };\n    } else {\n      return { status: \"Critical\", color: \"text-red-600\", icon: AlertTriangle };\n    }\n  };\n\n  const poolHealth = getPoolHealthStatus();\n\n  if (!userInfo?.user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground flex items-center space-x-2\">\n                <Key className=\"h-6 w-6\" />\n                <span>Quantum Key Dashboard</span>\n              </h2>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Manage your quantum key pool and monitor security capacity\n              </p>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              {(statsFetching || keysFetching || userFetching) && (\n                <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n                  <span>Live updating...</span>\n                </div>\n              )}\n              \n              <Button\n                onClick={() => handleRequestKey(8192)}\n                disabled={requestKeyMutation.isPending}\n                data-testid=\"button-request-key\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                {requestKeyMutation.isPending ? \"Requesting...\" : \"Request New Key\"}\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {\n                  queryClient.invalidateQueries({ queryKey: [\"/api/keys\"] });\n                  queryClient.invalidateQueries({ queryKey: [\"/api/keys/pool\"] });\n                }}\n                data-testid=\"button-refresh\"\n                className={statsFetching || keysFetching ? \"animate-spin\" : \"\"}\n              >\n                <RefreshCw className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"max-w-7xl mx-auto space-y-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {statsLoading ? (\n                Array.from({ length: 4 }).map((_, i) => (\n                  <Card key={i}>\n                    <CardContent className=\"p-6\">\n                      <Skeleton className=\"h-4 w-20 mb-2\" />\n                      <Skeleton className=\"h-8 w-16 mb-2\" />\n                      <Skeleton className=\"h-3 w-24\" />\n                    </CardContent>\n                  </Card>\n                ))\n              ) : keyPoolStats ? (\n                <>\n                  <Card className={statsFetching ? \"ring-2 ring-primary/20 transition-all duration-300\" : \"\"}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <p className=\"text-sm font-medium text-muted-foreground\">Total Capacity</p>\n                            {statsFetching && <div className=\"w-1 h-1 bg-primary rounded-full animate-pulse\"></div>}\n                          </div>\n                          <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-capacity\">\n                            {keyPoolStats.totalCapacityMB} MB\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {keyPoolStats.totalKeys} keys\n                          </p>\n                        </div>\n                        <Database className=\"h-8 w-8 text-primary\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={statsFetching ? \"ring-2 ring-green-200 transition-all duration-300\" : \"\"}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <p className=\"text-sm font-medium text-muted-foreground\">Available</p>\n                            {statsFetching && <div className=\"w-1 h-1 bg-green-500 rounded-full animate-pulse\"></div>}\n                          </div>\n                          <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-available\">\n                            {keyPoolStats.remainingMB} MB\n                          </p>\n                          <p className=\"text-xs text-green-600\">\n                            {(100 - keyPoolStats.utilizationPercent).toFixed(1)}% free\n                          </p>\n                        </div>\n                        <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={statsFetching ? \"ring-2 ring-blue-200 transition-all duration-300\" : \"\"}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <p className=\"text-sm font-medium text-muted-foreground\">Consumed</p>\n                            {statsFetching && <div className=\"w-1 h-1 bg-blue-500 rounded-full animate-pulse\"></div>}\n                          </div>\n                          <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-consumed\">\n                            {keyPoolStats.consumedMB} MB\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {keyPoolStats.utilizationPercent.toFixed(1)}% used\n                          </p>\n                        </div>\n                        <Activity className={`h-8 w-8 text-blue-600 ${statsFetching ? 'animate-pulse' : ''}`} />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className={statsFetching ? `ring-2 ${poolHealth.status === 'Critical' ? 'ring-red-200' : 'ring-green-200'} transition-all duration-300` : \"\"}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <p className=\"text-sm font-medium text-muted-foreground\">Pool Health</p>\n                            {statsFetching && <div className={`w-1 h-1 rounded-full animate-pulse ${poolHealth.status === 'Critical' ? 'bg-red-500' : 'bg-green-500'}`}></div>}\n                          </div>\n                          <p className={`text-2xl font-bold ${poolHealth.color}`} data-testid=\"text-pool-health\">\n                            {poolHealth.status}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Security status\n                          </p>\n                        </div>\n                        <poolHealth.icon className={`h-8 w-8 ${poolHealth.color} ${statsFetching ? 'animate-pulse' : ''}`} />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </>\n              ) : null}\n            </div>\n\n            {/* Key Pool Usage */}\n            {keyPoolStats && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <TrendingUp className=\"h-5 w-5\" />\n                    <span>Key Pool Usage</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Utilization</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {keyPoolStats.consumedMB} / {keyPoolStats.totalCapacityMB} MB\n                      </span>\n                    </div>\n                    <Progress \n                      value={keyPoolStats.utilizationPercent} \n                      className=\"h-3\"\n                      data-testid=\"progress-utilization\"\n                    />\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>0%</span>\n                      <span className=\"font-medium\">{keyPoolStats.utilizationPercent.toFixed(1)}% used</span>\n                      <span>100%</span>\n                    </div>\n                    \n                    {keyPoolStats.utilizationPercent > 80 && (\n                      <div className=\"flex items-center space-x-2 p-3 bg-amber-50 dark:bg-amber-950 border border-amber-200 dark:border-amber-800 rounded-md\">\n                        <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n                        <div>\n                          <p className=\"text-sm font-medium text-amber-800 dark:text-amber-200\">\n                            Key pool running low\n                          </p>\n                          <p className=\"text-xs text-amber-700 dark:text-amber-300\">\n                            Consider requesting additional quantum keys to maintain security levels.\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Individual Keys */}\n            <Card className={keysFetching ? \"ring-2 ring-primary/20 transition-all duration-300\" : \"\"}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Shield className=\"h-5 w-5\" />\n                    <span>Quantum Keys</span>\n                    {keysFetching && <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>}\n                  </div>\n                  {keys && (\n                    <Badge variant=\"secondary\" data-testid=\"badge-key-count\">\n                      {keys.length} keys\n                    </Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {keysLoading ? (\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 3 }).map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-4 p-4 border border-border rounded-lg\">\n                        <Skeleton className=\"w-12 h-12 rounded\" />\n                        <div className=\"flex-1 space-y-2\">\n                          <Skeleton className=\"h-4 w-32\" />\n                          <Skeleton className=\"h-3 w-48\" />\n                        </div>\n                        <Skeleton className=\"h-8 w-16\" />\n                      </div>\n                    ))}\n                  </div>\n                ) : keys && keys.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {keys.map((key) => (\n                      <div\n                        key={key.id}\n                        className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors\"\n                        data-testid={`key-item-${key.id}`}\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                            <Key className=\"h-6 w-6 text-primary\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-foreground\" data-testid=\"text-key-id\">\n                              {key.keyId}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {(key.keyLength / 1024).toFixed(1)} KB • \n                              Created {formatDistanceToNow(new Date(key.createdAt), { addSuffix: true })}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Expires {formatDistanceToNow(new Date(key.expiryTime), { addSuffix: true })}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"text-right min-w-[100px]\">\n                            <p className=\"text-sm font-medium text-foreground\">\n                              {key.utilizationPercent}% used\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {key.consumedBytes} / {key.maxConsumptionBytes} bytes\n                            </p>\n                            <Progress \n                              value={key.utilizationPercent} \n                              className=\"h-1 w-20 mt-1\"\n                            />\n                          </div>\n                          \n                          <Badge \n                            className={getKeyStatusColor(key)}\n                            data-testid=\"badge-key-status\"\n                          >\n                            {getKeyStatusText(key)}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Key className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-foreground mb-2\">No quantum keys</h3>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Request your first quantum key to start sending secure messages.\n                    </p>\n                    <Button onClick={() => handleRequestKey(8192)}>\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Request First Key\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":18641},"client/src/pages/login.tsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Shield, Mail } from \"lucide-react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isLogin, setIsLogin] = useState(true);\n\n  const [loginForm, setLoginForm] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n\n  // Check if already logged in\n  const { data: userInfo, isLoading } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => api.getMe(),\n    retry: false,\n    staleTime: 0, // Always check for fresh data\n    gcTime: 0 // Don't cache the result\n  });\n\n  // Use useEffect to handle redirection to avoid hooks order issues\n  React.useEffect(() => {\n    if (userInfo?.user && !isLoading) {\n      setLocation(\"/inbox\");\n    }\n  }, [userInfo, isLoading, setLocation]);\n\n  const loginMutation = useMutation({\n    mutationFn: (credentials: { email: string; password: string }) =>\n      api.login(credentials),\n    onSuccess: () => {\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to QuMail!\",\n      });\n      setLocation(\"/inbox\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: { username: string; email: string; password: string }) => {\n      return api.register(userData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      setLocation(\"/inbox\");\n      toast({\n        title: \"Account created\",\n        description: \"Welcome to QuMail! Your secure internal email platform.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginForm);\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username || !email || !password) {\n      toast({\n        title: \"Missing fields\",\n        description: \"Please fill in all fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    registerMutation.mutate({ username, email, password });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <Shield className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">QuMail</h1>\n              <p className=\"text-sm text-muted-foreground\">Quantum Secure Email</p>\n            </div>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Secure your communications with quantum encryption\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">\n              {isLogin ? \"Sign In\" : \"Create Account\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={isLogin ? \"login\" : \"register\"} onValueChange={(value) => setIsLogin(value === \"login\")}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={loginForm.email}\n                      onChange={(e) => setLoginForm({ ...loginForm, email: e.target.value })}\n                      placeholder=\"your.email@example.com\"\n                      required\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\">Password</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      value={loginForm.password}\n                      onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                      placeholder=\"••••••••\"\n                      required\n                      data-testid=\"input-password\"\n                    />\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-login\"\n                  >\n                    {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                    <Mail className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"register\">\n                  <form onSubmit={handleRegister} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"username\">Username</Label>\n                      <Input\n                        id=\"username\"\n                        type=\"text\"\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                        required\n                        data-testid=\"input-username\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"register-email\">Email Address</Label>\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        placeholder=\"your.email@qumail.com\"\n                        required\n                        data-testid=\"input-register-email\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        This will be your QuMail address for secure internal communication\n                      </p>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"register-password\">Password</Label>\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        required\n                        data-testid=\"input-register-password\"\n                      />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register\"\n                    >\n                      {registerMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          Creating Account...\n                        </>\n                      ) : (\n                        \"Create Account\"\n                      )}\n                    </Button>\n                  </form>\n                </TabsContent>\n\n            </Tabs>\n\n            <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <Shield className=\"h-4 w-4 text-accent\" />\n                <span className=\"text-sm font-medium\">Quantum Security Features</span>\n              </div>\n              <ul className=\"text-xs text-muted-foreground space-y-1\">\n                <li>• Quantum Key Distribution (QKD) simulation</li>\n                <li>• One-Time Pad encryption for maximum security</li>\n                <li>• Post-Quantum Cryptography readiness</li>\n                <li>• End-to-end encrypted communication</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9365},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport SecurityBadge from \"@/components/security-badge\";\nimport { \n  Settings as SettingsIcon, \n  User, \n  Shield, \n  Mail, \n  Key,\n  Save,\n  RefreshCw,\n  AlertCircle,\n  CheckCircle,\n  Info\n} from \"lucide-react\";\nimport { SecurityLevel } from \"@/lib/types\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const [defaultSecurityLevel, setDefaultSecurityLevel] = useState<SecurityLevel>(SecurityLevel.LEVEL1_OTP);\n  const [autoKeyRequest, setAutoKeyRequest] = useState(true);\n  const [keyPoolThreshold, setKeyPoolThreshold] = useState(10);\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [auditLogging, setAuditLogging] = useState(true);\n\n  const { data: userInfo, isFetching: userFetching } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: () => api.getMe(),\n    refetchInterval: 5000 // Refresh every 5 seconds for live updates\n  });\n\n  const { data: auditLogs, isLoading: auditLoading, isFetching: auditFetching } = useQuery({\n    queryKey: [\"/api/audit\"],\n    queryFn: () => api.getAuditLogs(10),\n    refetchInterval: 2000 // Refresh every 2 seconds for live activity updates\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: (settings: Record<string, any>) => api.updateSettings(settings),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Settings saved\",\n        description: \"Your preferences have been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to save settings\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSaveSettings = (e?: React.FormEvent) => {\n    if (e) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    \n    updateSettingsMutation.mutate({\n      defaultSecurityLevel,\n      // Note: Other settings would be implemented based on backend schema\n    });\n  };\n\n  const getProviderInfo = (provider: string) => {\n    switch (provider.toLowerCase()) {\n      case \"gmail\":\n        return { name: \"Gmail\", color: \"bg-red-100 text-red-800\", icon: \"📧\" };\n      case \"outlook\":\n        return { name: \"Outlook\", color: \"bg-blue-100 text-blue-800\", icon: \"📨\" };\n      case \"yahoo\":\n        return { name: \"Yahoo Mail\", color: \"bg-purple-100 text-purple-800\", icon: \"📬\" };\n      default:\n        return { name: provider, color: \"bg-gray-100 text-gray-800\", icon: \"📧\" };\n    }\n  };\n\n  if (!userInfo?.user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const user = userInfo.user;\n  const providerInfo = getProviderInfo(user.emailProvider || \"unknown\");\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      <Sidebar />\n      \n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground flex items-center space-x-2\">\n                <SettingsIcon className=\"h-6 w-6\" />\n                <span>Settings</span>\n              </h2>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Manage your account preferences and quantum security settings\n              </p>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              {(userFetching || auditFetching) && (\n                <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n                  <span>Live updating...</span>\n                </div>\n              )}\n              \n              <Button\n                onClick={handleSaveSettings}\n                disabled={updateSettingsMutation.isPending}\n                data-testid=\"button-save\"\n              >\n                <Save className=\"h-4 w-4 mr-2\" />\n                {updateSettingsMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            {/* User Profile */}\n            <Card className={userFetching ? \"ring-2 ring-primary/20 transition-all duration-300\" : \"\"}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <User className=\"h-5 w-5\" />\n                  <span>User Profile</span>\n                  {userFetching && <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      value={user.username}\n                      disabled\n                      data-testid=\"input-username\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Address</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={user.email}\n                      disabled\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Label>Email Provider</Label>\n                    {userFetching && <div className=\"w-1 h-1 bg-primary rounded-full animate-pulse\"></div>}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={providerInfo.color}>\n                      {providerInfo.icon} {providerInfo.name}\n                    </Badge>\n                    <span className=\"text-sm text-muted-foreground\">\n                      Connected and authenticated\n                    </span>\n                    <CheckCircle className={`h-4 w-4 text-green-600 ${userFetching ? 'animate-pulse' : ''}`} />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Security Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  <span>Quantum Security</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-3\">\n                  <Label>Default Security Level</Label>\n                  <Select \n                    value={defaultSecurityLevel} \n                    onValueChange={(value: SecurityLevel) => setDefaultSecurityLevel(value)}\n                  >\n                    <SelectTrigger data-testid=\"select-default-security\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value={SecurityLevel.LEVEL1_OTP}>Level 1 - Quantum OTP (Highest Security)</SelectItem>\n                      <SelectItem value={SecurityLevel.LEVEL2_AES}>Level 2 - Quantum-seeded AES-GCM</SelectItem>\n                      <SelectItem value={SecurityLevel.LEVEL3_PQC}>Level 3 - PQC Hybrid (Simulated)</SelectItem>\n                      <SelectItem value={SecurityLevel.LEVEL4_PLAIN}>Level 4 - Plain Text</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <div className=\"flex items-center space-x-2\">\n                    <SecurityBadge level={defaultSecurityLevel} size=\"sm\" />\n                    <span className=\"text-xs text-muted-foreground\">\n                      This will be pre-selected when composing new emails\n                    </span>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <Label>Automatic Key Management</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Automatically request new quantum keys when pool is low\n                      </p>\n                    </div>\n                    <Switch \n                      checked={autoKeyRequest} \n                      onCheckedChange={setAutoKeyRequest}\n                      data-testid=\"switch-auto-key\"\n                    />\n                  </div>\n                  \n                  {autoKeyRequest && (\n                    <div className=\"ml-4 space-y-2\">\n                      <Label>Key Pool Threshold (MB)</Label>\n                      <Input\n                        type=\"number\"\n                        value={keyPoolThreshold}\n                        onChange={(e) => setKeyPoolThreshold(Number(e.target.value))}\n                        min=\"1\"\n                        max=\"100\"\n                        className=\"w-24\"\n                        data-testid=\"input-threshold\"\n                      />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Request new keys when available capacity drops below this amount\n                      </p>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label>Enhanced Audit Logging</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Log detailed security events and key usage patterns\n                    </p>\n                  </div>\n                  <Switch \n                    checked={auditLogging} \n                    onCheckedChange={setAuditLogging}\n                    data-testid=\"switch-audit-logging\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Email Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Mail className=\"h-5 w-5\" />\n                  <span>Email Preferences</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label>Security Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Receive email alerts for security events and key pool status\n                    </p>\n                  </div>\n                  <Switch \n                    checked={emailNotifications} \n                    onCheckedChange={setEmailNotifications}\n                    data-testid=\"switch-notifications\"\n                  />\n                </div>\n\n                <Separator />\n\n                <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Info className=\"h-4 w-4 text-blue-600\" />\n                    <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                      Email Provider Connection\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                    Your {providerInfo.name} account is connected and configured for quantum-secure messaging. \n                    SMTP and IMAP settings are automatically managed.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Security Audit */}\n            <Card className={auditFetching ? \"ring-2 ring-primary/20 transition-all duration-300\" : \"\"}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Key className=\"h-5 w-5\" />\n                    <span>Recent Security Activity</span>\n                    {auditFetching && <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>}\n                  </div>\n                  <Button\n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => queryClient.invalidateQueries({ queryKey: [\"/api/audit\"] })}\n                    data-testid=\"button-refresh-audit\"\n                    className={auditFetching ? \"animate-spin\" : \"\"}\n                  >\n                    <RefreshCw className=\"h-4 w-4\" />\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {auditLoading ? (\n                  <div className=\"space-y-3\">\n                    {Array.from({ length: 5 }).map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-3\">\n                        <div className=\"w-2 h-2 bg-muted rounded-full\"></div>\n                        <div className=\"flex-1\">\n                          <div className=\"h-3 bg-muted rounded w-3/4 mb-1\"></div>\n                          <div className=\"h-2 bg-muted rounded w-1/2\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : auditLogs && auditLogs.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {auditLogs.slice(0, 8).map((log, index) => (\n                      <div \n                        key={log.id} \n                        className={`flex items-start space-x-3 p-3 rounded-lg border border-border transition-all duration-500 ${auditFetching && index === 0 ? 'ring-2 ring-primary/30 bg-primary/5' : 'hover:bg-muted/50'}`}\n                        data-testid={`audit-log-${log.id}`}\n                      >\n                        <div className={`w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0 ${auditFetching && index === 0 ? 'animate-pulse' : ''}`}></div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between\">\n                            <p className=\"text-sm font-medium text-foreground capitalize\">\n                              {log.action.replace(/_/g, ' ')}\n                            </p>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {new Date(log.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          {log.details && Object.keys(log.details).length > 0 && (\n                            <p className=\"text-xs text-muted-foreground mt-1\">\n                              {JSON.stringify(log.details, null, 0).slice(0, 100)}...\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-foreground mb-2\">No activity logs</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Security events will appear here as you use QuMail.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17089},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/audit.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Shield, \n  Activity, \n  User, \n  Calendar,\n  AlertTriangle,\n  CheckCircle,\n  Eye,\n  Lock\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function Audit() {\n  const { data: auditLogs, isLoading } = useQuery({\n    queryKey: [\"/api/audit\"],\n    queryFn: () => api.getAuditLogs(100),\n    refetchInterval: 10000 // Refresh every 10 seconds\n  });\n\n  const getActionIcon = (action: string) => {\n    switch (action.toLowerCase()) {\n      case 'login':\n      case 'authentication':\n        return <User className=\"h-4 w-4\" />;\n      case 'key_generation':\n      case 'key_request':\n        return <Lock className=\"h-4 w-4\" />;\n      case 'email_send':\n      case 'email_receive':\n        return <Activity className=\"h-4 w-4\" />;\n      case 'access':\n      case 'view':\n        return <Eye className=\"h-4 w-4\" />;\n      default:\n        return <Shield className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getActionVariant = (action: string) => {\n    switch (action.toLowerCase()) {\n      case 'login':\n      case 'email_send':\n      case 'key_generation':\n        return 'default';\n      case 'logout':\n      case 'failed_login':\n        return 'destructive';\n      case 'access':\n      case 'view':\n        return 'secondary';\n      default:\n        return 'outline';\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"container mx-auto p-6\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <Shield className=\"h-8 w-8 text-primary\" />\n            <div>\n              <h1 className=\"text-3xl font-bold\">Security Audit</h1>\n              <p className=\"text-muted-foreground\">Monitor system security events and user activities</p>\n            </div>\n          </div>\n\n          <div className=\"grid gap-6\">\n            {/* Security Overview */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Security Status</p>\n                      <p className=\"text-xl font-semibold text-green-600\">Secure</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Activity className=\"h-8 w-8 text-blue-500\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Active Sessions</p>\n                      <p className=\"text-xl font-semibold\">1</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <AlertTriangle className=\"h-8 w-8 text-yellow-500\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Security Events</p>\n                      <p className=\"text-xl font-semibold\">{auditLogs?.length || 0}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Audit Logs */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5\" />\n                  Security Event Log\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                  </div>\n                ) : auditLogs && auditLogs.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {auditLogs.map((log, index) => (\n                      <div key={log.id || index}>\n                        <div className=\"flex items-start gap-4 p-4 rounded-lg border bg-card\">\n                          <div className=\"flex items-center justify-center w-10 h-10 rounded-full bg-primary/10\">\n                            {getActionIcon(log.action)}\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <Badge variant={getActionVariant(log.action) as any}>\n                                {log.action}\n                              </Badge>\n                              <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                                <Calendar className=\"h-3 w-3\" />\n                                {format(new Date(log.timestamp), 'MMM d, yyyy HH:mm:ss')}\n                              </span>\n                            </div>\n                            \n                            <div className=\"text-sm space-y-1\">\n                              {log.userId && (\n                                <p className=\"text-muted-foreground\">\n                                  <span className=\"font-medium\">User ID:</span> {log.userId}\n                                </p>\n                              )}\n                              {log.ipAddress && (\n                                <p className=\"text-muted-foreground\">\n                                  <span className=\"font-medium\">IP Address:</span> {log.ipAddress}\n                                </p>\n                              )}\n                              {log.details && typeof log.details === 'object' && (\n                                <div className=\"mt-2\">\n                                  <p className=\"font-medium text-foreground mb-1\">Details:</p>\n                                  <pre className=\"text-xs bg-muted p-2 rounded overflow-x-auto\">\n                                    {JSON.stringify(log.details, null, 2)}\n                                  </pre>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        {index < auditLogs.length - 1 && <Separator className=\"my-2\" />}\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n                    <Shield className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No Security Events</h3>\n                    <p className=\"text-muted-foreground\">\n                      No security audit logs found. This is normal for new accounts.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":7581},"replit.md":{"content":"# QuMail - Quantum Secure Email Client Application\n\n## Overview\n\nQuMail is a quantum-secure email client application that demonstrates advanced cryptographic concepts by integrating traditional email protocols with simulated Quantum Key Distribution (QKD) technology. The application provides multiple security levels ranging from quantum one-time pad encryption to traditional plaintext, showcasing how quantum cryptography could enhance email security in the future.\n\nThe system consists of a full-stack web application with a React frontend, Express.js backend, and PostgreSQL database, along with a simulated Quantum Key Management Entity (KME) that follows ETSI GS QKD-014 standards for key distribution.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent design\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Session Management**: Express sessions with PostgreSQL session store\n- **Authentication**: Session-based authentication with secure cookie configuration\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL via Neon Database serverless offering\n- **ORM**: Drizzle ORM with schema-first approach located in shared directory\n- **File Storage**: JSON-based temporary storage for development (keys.json, users.json, messages.json, etc.)\n- **Migrations**: Drizzle Kit for database migrations and schema management\n\n### Security Architecture\nThe application implements a multi-tier security model:\n\n1. **Level 1 - Quantum OTP**: One-Time Pad encryption using quantum-distributed keys\n2. **Level 2 - Quantum-seeded AES**: AES-GCM encryption with quantum-derived keys  \n3. **Level 3 - Post-Quantum Cryptography**: Simulated hybrid approach combining QKD with post-quantum algorithms\n4. **Level 4 - Plain Text**: Traditional unencrypted email for compatibility\n\n### Quantum Key Management\n- **KME Simulator**: Custom implementation following ETSI GS QKD-014 protocol standards\n- **Key Pool Management**: Automated key generation, distribution, and lifecycle management\n- **Key Consumption Tracking**: Monitoring of key usage to prevent reuse and ensure perfect forward secrecy\n\n### Email Integration\n- **SMTP**: Nodemailer for sending emails through various providers\n- **IMAP**: Support for fetching emails from external providers\n- **Microsoft Graph**: Integration with Outlook/Office 365 via Microsoft Graph API\n- **Multi-provider Support**: Gmail, Outlook, Yahoo, and internal QuMail accounts\n\n### Authentication and Authorization\n- **Session-based Authentication**: Secure session management with PostgreSQL backing\n- **Password Security**: Bcrypt hashing for password storage\n- **Access Control**: Route-level protection with authentication middleware\n- **Audit Logging**: Comprehensive logging of all security-related actions\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connectivity\n- **drizzle-orm**: TypeScript ORM for database operations\n- **express**: Web application framework\n- **express-session**: Session management middleware\n- **connect-pg-simple**: PostgreSQL session store\n\n### Frontend Dependencies\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight routing library\n- **@radix-ui/***: Headless UI component primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Type-safe variant API for components\n\n### Email and Communication\n- **@microsoft/microsoft-graph-client**: Microsoft Graph API integration\n- **@types/nodemailer**: Email sending capabilities (types)\n\n### Development and Build Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Type checking and compilation\n- **esbuild**: Fast JavaScript bundler for production builds\n- **tsx**: TypeScript execution for development\n\n### Security and Cryptography\n- **Node.js crypto module**: Built-in cryptographic functions\n- **bcrypt**: Password hashing (implied from authentication patterns)\n\n### Utilities and Helpers\n- **date-fns**: Date manipulation and formatting\n- **clsx**: Conditional className utility\n- **nanoid**: Unique ID generation\n- **zod**: Runtime type validation and schema validation\n\nThe application follows a monorepo structure with shared types and schemas, enabling type safety across the entire stack while maintaining clear separation of concerns between frontend, backend, and shared utilities.","size_bytes":5025}},"version":1}